/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Notary : IEquatable<Notary>
    {
        /// <summary>
        /// Gets or Sets ClientIdContentNotary
        /// </summary>

        [DataMember(Name = "clientIdContentNotary")]
        public long? ClientIdContentNotary { get; set; }

        /// <summary>
        /// Gets or Sets NameNotary
        /// </summary>

        [DataMember(Name = "nameNotary")]
        public string NameNotary { get; set; }

        /// <summary>
        /// Gets or Sets DateContentNotary
        /// </summary>

        [DataMember(Name = "dateContentNotary")]
        public long? DateContentNotary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notary {\n");
            sb.Append("  ClientIdContentNotary: ").Append(ClientIdContentNotary).Append("\n");
            sb.Append("  NameNotary: ").Append(NameNotary).Append("\n");
            sb.Append("  DateContentNotary: ").Append(DateContentNotary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Notary)obj);
        }

        /// <summary>
        /// Returns true if Notary instances are equal
        /// </summary>
        /// <param name="other">Instance of Notary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notary other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ClientIdContentNotary == other.ClientIdContentNotary ||
                    ClientIdContentNotary != null &&
                    ClientIdContentNotary.Equals(other.ClientIdContentNotary)
                ) &&
                (
                    NameNotary == other.NameNotary ||
                    NameNotary != null &&
                    NameNotary.Equals(other.NameNotary)
                ) &&
                (
                    DateContentNotary == other.DateContentNotary ||
                    DateContentNotary != null &&
                    DateContentNotary.Equals(other.DateContentNotary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ClientIdContentNotary != null)
                    hashCode = hashCode * 59 + ClientIdContentNotary.GetHashCode();
                if (NameNotary != null)
                    hashCode = hashCode * 59 + NameNotary.GetHashCode();
                if (DateContentNotary != null)
                    hashCode = hashCode * 59 + DateContentNotary.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Notary left, Notary right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Notary left, Notary right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
