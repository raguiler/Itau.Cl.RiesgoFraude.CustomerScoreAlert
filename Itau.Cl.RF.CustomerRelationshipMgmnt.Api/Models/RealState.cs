/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RealState : IEquatable<RealState>
    {
        /// <summary>
        /// Gets or Sets CommuneRealEstate
        /// </summary>

        [DataMember(Name = "communeRealEstate")]
        public string CommuneRealEstate { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>

        [DataMember(Name = "role")]
        public RealStateRole Role { get; set; }

        /// <summary>
        /// Gets or Sets AddressRealEstate
        /// </summary>

        [DataMember(Name = "addressRealEstate")]
        public string AddressRealEstate { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>

        [DataMember(Name = "destination")]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets TaxAppraisal
        /// </summary>

        [DataMember(Name = "taxAppraisal")]
        public TaxAppraisal TaxAppraisal { get; set; }

        /// <summary>
        /// Gets or Sets QuotaExpiredByPay
        /// </summary>

        [DataMember(Name = "quotaExpiredByPay")]
        public bool? QuotaExpiredByPay { get; set; }

        /// <summary>
        /// Gets or Sets QuotasValidByPay
        /// </summary>

        [DataMember(Name = "quotasValidByPay")]
        public bool? QuotasValidByPay { get; set; }

        /// <summary>
        /// Gets or Sets QuotasContributions
        /// </summary>

        [DataMember(Name = "quotasContributions")]
        public QuotasContributions QuotasContributions { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>

        [DataMember(Name = "condition")]
        public string Condition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RealState {\n");
            sb.Append("  CommuneRealEstate: ").Append(CommuneRealEstate).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  AddressRealEstate: ").Append(AddressRealEstate).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  TaxAppraisal: ").Append(TaxAppraisal).Append("\n");
            sb.Append("  QuotaExpiredByPay: ").Append(QuotaExpiredByPay).Append("\n");
            sb.Append("  QuotasValidByPay: ").Append(QuotasValidByPay).Append("\n");
            sb.Append("  QuotasContributions: ").Append(QuotasContributions).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RealState)obj);
        }

        /// <summary>
        /// Returns true if RealState instances are equal
        /// </summary>
        /// <param name="other">Instance of RealState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealState other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CommuneRealEstate == other.CommuneRealEstate ||
                    CommuneRealEstate != null &&
                    CommuneRealEstate.Equals(other.CommuneRealEstate)
                ) &&
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                ) &&
                (
                    AddressRealEstate == other.AddressRealEstate ||
                    AddressRealEstate != null &&
                    AddressRealEstate.Equals(other.AddressRealEstate)
                ) &&
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.Equals(other.Destination)
                ) &&
                (
                    TaxAppraisal == other.TaxAppraisal ||
                    TaxAppraisal != null &&
                    TaxAppraisal.Equals(other.TaxAppraisal)
                ) &&
                (
                    QuotaExpiredByPay == other.QuotaExpiredByPay ||
                    QuotaExpiredByPay != null &&
                    QuotaExpiredByPay.Equals(other.QuotaExpiredByPay)
                ) &&
                (
                    QuotasValidByPay == other.QuotasValidByPay ||
                    QuotasValidByPay != null &&
                    QuotasValidByPay.Equals(other.QuotasValidByPay)
                ) &&
                (
                    QuotasContributions == other.QuotasContributions ||
                    QuotasContributions != null &&
                    QuotasContributions.Equals(other.QuotasContributions)
                ) &&
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.Equals(other.Condition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CommuneRealEstate != null)
                    hashCode = hashCode * 59 + CommuneRealEstate.GetHashCode();
                if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                if (AddressRealEstate != null)
                    hashCode = hashCode * 59 + AddressRealEstate.GetHashCode();
                if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                if (TaxAppraisal != null)
                    hashCode = hashCode * 59 + TaxAppraisal.GetHashCode();
                if (QuotaExpiredByPay != null)
                    hashCode = hashCode * 59 + QuotaExpiredByPay.GetHashCode();
                if (QuotasValidByPay != null)
                    hashCode = hashCode * 59 + QuotasValidByPay.GetHashCode();
                if (QuotasContributions != null)
                    hashCode = hashCode * 59 + QuotasContributions.GetHashCode();
                if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(RealState left, RealState right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RealState left, RealState right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
