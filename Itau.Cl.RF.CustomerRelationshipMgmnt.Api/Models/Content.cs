/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Content : IEquatable<Content>
    {
        /// <summary>
        /// Gets or Sets NameCorporatePerformancesContent
        /// </summary>

        [DataMember(Name = "nameCorporatePerformancesContent")]
        public string NameCorporatePerformancesContent { get; set; }

        /// <summary>
        /// Gets or Sets NameFantasyContent
        /// </summary>

        [DataMember(Name = "nameFantasyContent")]
        public string NameFantasyContent { get; set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>

        [DataMember(Name = "stock")]
        public Stock Stock { get; set; }

        /// <summary>
        /// Gets or Sets DurationContent
        /// </summary>

        [DataMember(Name = "durationContent")]
        public string DurationContent { get; set; }

        /// <summary>
        /// Gets or Sets ObjectPerformancesContent
        /// </summary>

        [DataMember(Name = "objectPerformancesContent")]
        public string ObjectPerformancesContent { get; set; }

        /// <summary>
        /// Gets or Sets FigureContent
        /// </summary>

        [DataMember(Name = "figureContent")]
        public string FigureContent { get; set; }

        /// <summary>
        /// Gets or Sets PublicationDate
        /// </summary>

        [DataMember(Name = "publicationDate")]
        public long? PublicationDate { get; set; }

        /// <summary>
        /// Gets or Sets ResidencyPerformances
        /// </summary>

        [DataMember(Name = "residencyPerformances")]
        public string ResidencyPerformances { get; set; }

        /// <summary>
        /// Gets or Sets CommuneContent
        /// </summary>

        [DataMember(Name = "communeContent")]
        public string CommuneContent { get; set; }

        /// <summary>
        /// Gets or Sets RegionPerformancesContent
        /// </summary>

        [DataMember(Name = "regionPerformancesContent")]
        public string RegionPerformancesContent { get; set; }

        /// <summary>
        /// Gets or Sets Articles
        /// </summary>

        [DataMember(Name = "articles")]
        public List<Article> Articles { get; set; }

        /// <summary>
        /// Gets or Sets Appearing
        /// </summary>

        [DataMember(Name = "appearing")]
        public List<Appearin> Appearing { get; set; }

        /// <summary>
        /// Gets or Sets Partners
        /// </summary>

        [DataMember(Name = "partners")]
        public List<Partner> Partners { get; set; }

        /// <summary>
        /// Gets or Sets Administration
        /// </summary>

        [DataMember(Name = "administration")]
        public Administration Administration { get; set; }

        /// <summary>
        /// Gets or Sets Authority
        /// </summary>

        [DataMember(Name = "authority")]
        public List<string> Authority { get; set; }

        /// <summary>
        /// Gets or Sets Notary
        /// </summary>

        [DataMember(Name = "notary")]
        public Notary Notary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Content {\n");
            sb.Append("  NameCorporatePerformancesContent: ").Append(NameCorporatePerformancesContent).Append("\n");
            sb.Append("  NameFantasyContent: ").Append(NameFantasyContent).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  DurationContent: ").Append(DurationContent).Append("\n");
            sb.Append("  ObjectPerformancesContent: ").Append(ObjectPerformancesContent).Append("\n");
            sb.Append("  FigureContent: ").Append(FigureContent).Append("\n");
            sb.Append("  PublicationDate: ").Append(PublicationDate).Append("\n");
            sb.Append("  ResidencyPerformances: ").Append(ResidencyPerformances).Append("\n");
            sb.Append("  CommuneContent: ").Append(CommuneContent).Append("\n");
            sb.Append("  RegionPerformancesContent: ").Append(RegionPerformancesContent).Append("\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("  Appearing: ").Append(Appearing).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("  Administration: ").Append(Administration).Append("\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  Notary: ").Append(Notary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Content)obj);
        }

        /// <summary>
        /// Returns true if Content instances are equal
        /// </summary>
        /// <param name="other">Instance of Content to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Content other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    NameCorporatePerformancesContent == other.NameCorporatePerformancesContent ||
                    NameCorporatePerformancesContent != null &&
                    NameCorporatePerformancesContent.Equals(other.NameCorporatePerformancesContent)
                ) &&
                (
                    NameFantasyContent == other.NameFantasyContent ||
                    NameFantasyContent != null &&
                    NameFantasyContent.Equals(other.NameFantasyContent)
                ) &&
                (
                    Stock == other.Stock ||
                    Stock != null &&
                    Stock.Equals(other.Stock)
                ) &&
                (
                    DurationContent == other.DurationContent ||
                    DurationContent != null &&
                    DurationContent.Equals(other.DurationContent)
                ) &&
                (
                    ObjectPerformancesContent == other.ObjectPerformancesContent ||
                    ObjectPerformancesContent != null &&
                    ObjectPerformancesContent.Equals(other.ObjectPerformancesContent)
                ) &&
                (
                    FigureContent == other.FigureContent ||
                    FigureContent != null &&
                    FigureContent.Equals(other.FigureContent)
                ) &&
                (
                    PublicationDate == other.PublicationDate ||
                    PublicationDate != null &&
                    PublicationDate.Equals(other.PublicationDate)
                ) &&
                (
                    ResidencyPerformances == other.ResidencyPerformances ||
                    ResidencyPerformances != null &&
                    ResidencyPerformances.Equals(other.ResidencyPerformances)
                ) &&
                (
                    CommuneContent == other.CommuneContent ||
                    CommuneContent != null &&
                    CommuneContent.Equals(other.CommuneContent)
                ) &&
                (
                    RegionPerformancesContent == other.RegionPerformancesContent ||
                    RegionPerformancesContent != null &&
                    RegionPerformancesContent.Equals(other.RegionPerformancesContent)
                ) &&
                (
                    Articles == other.Articles ||
                    Articles != null &&
                    Articles.SequenceEqual(other.Articles)
                ) &&
                (
                    Appearing == other.Appearing ||
                    Appearing != null &&
                    Appearing.SequenceEqual(other.Appearing)
                ) &&
                (
                    Partners == other.Partners ||
                    Partners != null &&
                    Partners.SequenceEqual(other.Partners)
                ) &&
                (
                    Administration == other.Administration ||
                    Administration != null &&
                    Administration.Equals(other.Administration)
                ) &&
                (
                    Authority == other.Authority ||
                    Authority != null &&
                    Authority.SequenceEqual(other.Authority)
                ) &&
                (
                    Notary == other.Notary ||
                    Notary != null &&
                    Notary.Equals(other.Notary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NameCorporatePerformancesContent != null)
                    hashCode = hashCode * 59 + NameCorporatePerformancesContent.GetHashCode();
                if (NameFantasyContent != null)
                    hashCode = hashCode * 59 + NameFantasyContent.GetHashCode();
                if (Stock != null)
                    hashCode = hashCode * 59 + Stock.GetHashCode();
                if (DurationContent != null)
                    hashCode = hashCode * 59 + DurationContent.GetHashCode();
                if (ObjectPerformancesContent != null)
                    hashCode = hashCode * 59 + ObjectPerformancesContent.GetHashCode();
                if (FigureContent != null)
                    hashCode = hashCode * 59 + FigureContent.GetHashCode();
                if (PublicationDate != null)
                    hashCode = hashCode * 59 + PublicationDate.GetHashCode();
                if (ResidencyPerformances != null)
                    hashCode = hashCode * 59 + ResidencyPerformances.GetHashCode();
                if (CommuneContent != null)
                    hashCode = hashCode * 59 + CommuneContent.GetHashCode();
                if (RegionPerformancesContent != null)
                    hashCode = hashCode * 59 + RegionPerformancesContent.GetHashCode();
                if (Articles != null)
                    hashCode = hashCode * 59 + Articles.GetHashCode();
                if (Appearing != null)
                    hashCode = hashCode * 59 + Appearing.GetHashCode();
                if (Partners != null)
                    hashCode = hashCode * 59 + Partners.GetHashCode();
                if (Administration != null)
                    hashCode = hashCode * 59 + Administration.GetHashCode();
                if (Authority != null)
                    hashCode = hashCode * 59 + Authority.GetHashCode();
                if (Notary != null)
                    hashCode = hashCode * 59 + Notary.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Content left, Content right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Content left, Content right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
