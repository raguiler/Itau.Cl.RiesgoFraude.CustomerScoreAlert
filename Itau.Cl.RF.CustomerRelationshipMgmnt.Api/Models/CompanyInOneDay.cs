/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CompanyInOneDay : IEquatable<CompanyInOneDay>
    {
        /// <summary>
        /// Gets or Sets Executive
        /// </summary>

        [DataMember(Name = "executive")]
        public string Executive { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>

        [DataMember(Name = "date")]
        public long? Date { get; set; }

        /// <summary>
        /// Gets or Sets Performances
        /// </summary>

        [DataMember(Name = "performances")]
        public List<Performance> Performances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyInOneDay {\n");
            sb.Append("  Executive: ").Append(Executive).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Performances: ").Append(Performances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CompanyInOneDay)obj);
        }

        /// <summary>
        /// Returns true if CompanyInOneDay instances are equal
        /// </summary>
        /// <param name="other">Instance of CompanyInOneDay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInOneDay other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Executive == other.Executive ||
                    Executive != null &&
                    Executive.Equals(other.Executive)
                ) &&
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) &&
                (
                    Performances == other.Performances ||
                    Performances != null &&
                    Performances.SequenceEqual(other.Performances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Executive != null)
                    hashCode = hashCode * 59 + Executive.GetHashCode();
                if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                if (Performances != null)
                    hashCode = hashCode * 59 + Performances.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CompanyInOneDay left, CompanyInOneDay right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CompanyInOneDay left, CompanyInOneDay right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
