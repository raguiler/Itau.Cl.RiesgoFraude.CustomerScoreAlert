/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FinancialRating : IEquatable<FinancialRating>
    {
        /// <summary>
        /// Gets or Sets ValueEconomicActivityRating
        /// </summary>

        [DataMember(Name = "valueEconomicActivityRating")]
        public long? ValueEconomicActivityRating { get; set; }

        /// <summary>
        /// Gets or Sets CommentRating
        /// </summary>

        [DataMember(Name = "commentRating")]
        public string CommentRating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialRating {\n");
            sb.Append("  ValueEconomicActivityRating: ").Append(ValueEconomicActivityRating).Append("\n");
            sb.Append("  CommentRating: ").Append(CommentRating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FinancialRating)obj);
        }

        /// <summary>
        /// Returns true if FinancialRating instances are equal
        /// </summary>
        /// <param name="other">Instance of FinancialRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialRating other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ValueEconomicActivityRating == other.ValueEconomicActivityRating ||
                    ValueEconomicActivityRating != null &&
                    ValueEconomicActivityRating.Equals(other.ValueEconomicActivityRating)
                ) &&
                (
                    CommentRating == other.CommentRating ||
                    CommentRating != null &&
                    CommentRating.Equals(other.CommentRating)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ValueEconomicActivityRating != null)
                    hashCode = hashCode * 59 + ValueEconomicActivityRating.GetHashCode();
                if (CommentRating != null)
                    hashCode = hashCode * 59 + CommentRating.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FinancialRating left, FinancialRating right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FinancialRating left, FinancialRating right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
