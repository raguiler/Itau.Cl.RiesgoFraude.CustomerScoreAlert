/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreditSubject : IEquatable<CreditSubject>
    {
        /// <summary>
        /// Gets or Sets EconomicActivity
        /// </summary>

        [DataMember(Name = "economicActivity")]
        public List<SiiEconomicActivity> EconomicActivity { get; set; }

        /// <summary>
        /// Gets or Sets Ad
        /// </summary>

        [DataMember(Name = "ad")]
        public List<SiiAd> Ad { get; set; }

        /// <summary>
        /// Gets or Sets StampedDocuments
        /// </summary>

        [DataMember(Name = "stampedDocuments")]
        public List<StampedDocument> StampedDocuments { get; set; }

        /// <summary>
        /// Gets or Sets StartDateActivities
        /// </summary>

        [DataMember(Name = "startDateActivities")]
        public long? StartDateActivities { get; set; }

        /// <summary>
        /// Gets or Sets DateTermActivities
        /// </summary>

        [DataMember(Name = "dateTermActivities")]
        public long? DateTermActivities { get; set; }

        /// <summary>
        /// Gets or Sets NameCorporateEconomicActivity
        /// </summary>

        [DataMember(Name = "nameCorporateEconomicActivity")]
        public string NameCorporateEconomicActivity { get; set; }

        /// <summary>
        /// Gets or Sets ClientIdEconomicActivity
        /// </summary>

        [DataMember(Name = "clientIdEconomicActivity")]
        public int? ClientIdEconomicActivity { get; set; }

        /// <summary>
        /// Gets or Sets ClientIdAsString
        /// </summary>

        [DataMember(Name = "clientIdAsString")]
        public string ClientIdAsString { get; set; }

        /// <summary>
        /// Gets or Sets TypePerson
        /// </summary>

        [DataMember(Name = "typePerson")]
        public string TypePerson { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>

        [DataMember(Name = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets CommuneEconomicActivity
        /// </summary>

        [DataMember(Name = "communeEconomicActivity")]
        public string CommuneEconomicActivity { get; set; }

        /// <summary>
        /// Gets or Sets RegionEconomicActivity
        /// </summary>

        [DataMember(Name = "regionEconomicActivity")]
        public string RegionEconomicActivity { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>

        [DataMember(Name = "rating")]
        public FinancialRating Rating { get; set; }

        /// <summary>
        /// Gets or Sets SizeEconomicActivity
        /// </summary>

        [DataMember(Name = "sizeEconomicActivity")]
        public string SizeEconomicActivity { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>

        [DataMember(Name = "period")]
        public long? Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditSubject {\n");
            sb.Append("  EconomicActivity: ").Append(EconomicActivity).Append("\n");
            sb.Append("  Ad: ").Append(Ad).Append("\n");
            sb.Append("  StampedDocuments: ").Append(StampedDocuments).Append("\n");
            sb.Append("  StartDateActivities: ").Append(StartDateActivities).Append("\n");
            sb.Append("  DateTermActivities: ").Append(DateTermActivities).Append("\n");
            sb.Append("  NameCorporateEconomicActivity: ").Append(NameCorporateEconomicActivity).Append("\n");
            sb.Append("  ClientIdEconomicActivity: ").Append(ClientIdEconomicActivity).Append("\n");
            sb.Append("  ClientIdAsString: ").Append(ClientIdAsString).Append("\n");
            sb.Append("  TypePerson: ").Append(TypePerson).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CommuneEconomicActivity: ").Append(CommuneEconomicActivity).Append("\n");
            sb.Append("  RegionEconomicActivity: ").Append(RegionEconomicActivity).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  SizeEconomicActivity: ").Append(SizeEconomicActivity).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditSubject)obj);
        }

        /// <summary>
        /// Returns true if CreditSubject instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditSubject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditSubject other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    EconomicActivity == other.EconomicActivity ||
                    EconomicActivity != null &&
                    EconomicActivity.SequenceEqual(other.EconomicActivity)
                ) &&
                (
                    Ad == other.Ad ||
                    Ad != null &&
                    Ad.SequenceEqual(other.Ad)
                ) &&
                (
                    StampedDocuments == other.StampedDocuments ||
                    StampedDocuments != null &&
                    StampedDocuments.SequenceEqual(other.StampedDocuments)
                ) &&
                (
                    StartDateActivities == other.StartDateActivities ||
                    StartDateActivities != null &&
                    StartDateActivities.Equals(other.StartDateActivities)
                ) &&
                (
                    DateTermActivities == other.DateTermActivities ||
                    DateTermActivities != null &&
                    DateTermActivities.Equals(other.DateTermActivities)
                ) &&
                (
                    NameCorporateEconomicActivity == other.NameCorporateEconomicActivity ||
                    NameCorporateEconomicActivity != null &&
                    NameCorporateEconomicActivity.Equals(other.NameCorporateEconomicActivity)
                ) &&
                (
                    ClientIdEconomicActivity == other.ClientIdEconomicActivity ||
                    ClientIdEconomicActivity != null &&
                    ClientIdEconomicActivity.Equals(other.ClientIdEconomicActivity)
                ) &&
                (
                    ClientIdAsString == other.ClientIdAsString ||
                    ClientIdAsString != null &&
                    ClientIdAsString.Equals(other.ClientIdAsString)
                ) &&
                (
                    TypePerson == other.TypePerson ||
                    TypePerson != null &&
                    TypePerson.Equals(other.TypePerson)
                ) &&
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) &&
                (
                    CommuneEconomicActivity == other.CommuneEconomicActivity ||
                    CommuneEconomicActivity != null &&
                    CommuneEconomicActivity.Equals(other.CommuneEconomicActivity)
                ) &&
                (
                    RegionEconomicActivity == other.RegionEconomicActivity ||
                    RegionEconomicActivity != null &&
                    RegionEconomicActivity.Equals(other.RegionEconomicActivity)
                ) &&
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                ) &&
                (
                    SizeEconomicActivity == other.SizeEconomicActivity ||
                    SizeEconomicActivity != null &&
                    SizeEconomicActivity.Equals(other.SizeEconomicActivity)
                ) &&
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (EconomicActivity != null)
                    hashCode = hashCode * 59 + EconomicActivity.GetHashCode();
                if (Ad != null)
                    hashCode = hashCode * 59 + Ad.GetHashCode();
                if (StampedDocuments != null)
                    hashCode = hashCode * 59 + StampedDocuments.GetHashCode();
                if (StartDateActivities != null)
                    hashCode = hashCode * 59 + StartDateActivities.GetHashCode();
                if (DateTermActivities != null)
                    hashCode = hashCode * 59 + DateTermActivities.GetHashCode();
                if (NameCorporateEconomicActivity != null)
                    hashCode = hashCode * 59 + NameCorporateEconomicActivity.GetHashCode();
                if (ClientIdEconomicActivity != null)
                    hashCode = hashCode * 59 + ClientIdEconomicActivity.GetHashCode();
                if (ClientIdAsString != null)
                    hashCode = hashCode * 59 + ClientIdAsString.GetHashCode();
                if (TypePerson != null)
                    hashCode = hashCode * 59 + TypePerson.GetHashCode();
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (CommuneEconomicActivity != null)
                    hashCode = hashCode * 59 + CommuneEconomicActivity.GetHashCode();
                if (RegionEconomicActivity != null)
                    hashCode = hashCode * 59 + RegionEconomicActivity.GetHashCode();
                if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                if (SizeEconomicActivity != null)
                    hashCode = hashCode * 59 + SizeEconomicActivity.GetHashCode();
                if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CreditSubject left, CreditSubject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditSubject left, CreditSubject right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
