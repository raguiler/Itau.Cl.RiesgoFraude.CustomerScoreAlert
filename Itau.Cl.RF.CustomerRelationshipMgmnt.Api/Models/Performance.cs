/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Performance : IEquatable<Performance>
    {
        /// <summary>
        /// Gets or Sets Cve
        /// </summary>

        [DataMember(Name = "cve")]
        public string Cve { get; set; }

        /// <summary>
        /// Gets or Sets DatePerformances
        /// </summary>

        [DataMember(Name = "datePerformances")]
        public long? DatePerformances { get; set; }

        /// <summary>
        /// Gets or Sets _Performance
        /// </summary>

        [DataMember(Name = "performance")]
        public string _Performance { get; set; }

        /// <summary>
        /// Gets or Sets NameCorporatePerformances
        /// </summary>

        [DataMember(Name = "nameCorporatePerformances")]
        public string NameCorporatePerformances { get; set; }

        /// <summary>
        /// Gets or Sets DocumentPerformances
        /// </summary>

        [DataMember(Name = "documentPerformances")]
        public string DocumentPerformances { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>

        [DataMember(Name = "content")]
        public Content Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Performance {\n");
            sb.Append("  Cve: ").Append(Cve).Append("\n");
            sb.Append("  DatePerformances: ").Append(DatePerformances).Append("\n");
            sb.Append("  _Performance: ").Append(_Performance).Append("\n");
            sb.Append("  NameCorporatePerformances: ").Append(NameCorporatePerformances).Append("\n");
            sb.Append("  DocumentPerformances: ").Append(DocumentPerformances).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Performance)obj);
        }

        /// <summary>
        /// Returns true if Performance instances are equal
        /// </summary>
        /// <param name="other">Instance of Performance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Performance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Cve == other.Cve ||
                    Cve != null &&
                    Cve.Equals(other.Cve)
                ) &&
                (
                    DatePerformances == other.DatePerformances ||
                    DatePerformances != null &&
                    DatePerformances.Equals(other.DatePerformances)
                ) &&
                (
                    _Performance == other._Performance ||
                    _Performance != null &&
                    _Performance.Equals(other._Performance)
                ) &&
                (
                    NameCorporatePerformances == other.NameCorporatePerformances ||
                    NameCorporatePerformances != null &&
                    NameCorporatePerformances.Equals(other.NameCorporatePerformances)
                ) &&
                (
                    DocumentPerformances == other.DocumentPerformances ||
                    DocumentPerformances != null &&
                    DocumentPerformances.Equals(other.DocumentPerformances)
                ) &&
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Cve != null)
                    hashCode = hashCode * 59 + Cve.GetHashCode();
                if (DatePerformances != null)
                    hashCode = hashCode * 59 + DatePerformances.GetHashCode();
                if (_Performance != null)
                    hashCode = hashCode * 59 + _Performance.GetHashCode();
                if (NameCorporatePerformances != null)
                    hashCode = hashCode * 59 + NameCorporatePerformances.GetHashCode();
                if (DocumentPerformances != null)
                    hashCode = hashCode * 59 + DocumentPerformances.GetHashCode();
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Performance left, Performance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Performance left, Performance right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
