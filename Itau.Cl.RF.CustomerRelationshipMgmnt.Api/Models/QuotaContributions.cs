/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QuotaContributions : IEquatable<QuotaContributions>
    {
        /// <summary>
        /// Gets or Sets Expiration
        /// </summary>

        [DataMember(Name = "expiration")]
        public int? Expiration { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>

        [DataMember(Name = "total")]
        public long? Total { get; set; }

        /// <summary>
        /// Gets or Sets Quota
        /// </summary>

        [DataMember(Name = "quota")]
        public string Quota { get; set; }

        /// <summary>
        /// Gets or Sets ValueQuotas
        /// </summary>

        [DataMember(Name = "valueQuotas")]
        public long? ValueQuotas { get; set; }

        /// <summary>
        /// Gets or Sets FolioQuotas
        /// </summary>

        [DataMember(Name = "folioQuotas")]
        public string FolioQuotas { get; set; }

        /// <summary>
        /// Gets or Sets LinkFolio
        /// </summary>

        [DataMember(Name = "linkFolio")]
        public string LinkFolio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuotaContributions {\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  ValueQuotas: ").Append(ValueQuotas).Append("\n");
            sb.Append("  FolioQuotas: ").Append(FolioQuotas).Append("\n");
            sb.Append("  LinkFolio: ").Append(LinkFolio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QuotaContributions)obj);
        }

        /// <summary>
        /// Returns true if QuotaContributions instances are equal
        /// </summary>
        /// <param name="other">Instance of QuotaContributions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuotaContributions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Expiration == other.Expiration ||
                    Expiration != null &&
                    Expiration.Equals(other.Expiration)
                ) &&
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) &&
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) &&
                (
                    Quota == other.Quota ||
                    Quota != null &&
                    Quota.Equals(other.Quota)
                ) &&
                (
                    ValueQuotas == other.ValueQuotas ||
                    ValueQuotas != null &&
                    ValueQuotas.Equals(other.ValueQuotas)
                ) &&
                (
                    FolioQuotas == other.FolioQuotas ||
                    FolioQuotas != null &&
                    FolioQuotas.Equals(other.FolioQuotas)
                ) &&
                (
                    LinkFolio == other.LinkFolio ||
                    LinkFolio != null &&
                    LinkFolio.Equals(other.LinkFolio)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Expiration != null)
                    hashCode = hashCode * 59 + Expiration.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                if (Quota != null)
                    hashCode = hashCode * 59 + Quota.GetHashCode();
                if (ValueQuotas != null)
                    hashCode = hashCode * 59 + ValueQuotas.GetHashCode();
                if (FolioQuotas != null)
                    hashCode = hashCode * 59 + FolioQuotas.GetHashCode();
                if (LinkFolio != null)
                    hashCode = hashCode * 59 + LinkFolio.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(QuotaContributions left, QuotaContributions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QuotaContributions left, QuotaContributions right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
