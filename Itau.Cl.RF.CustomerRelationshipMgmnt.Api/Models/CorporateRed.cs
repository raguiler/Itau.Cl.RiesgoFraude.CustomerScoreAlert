/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CorporateRed : IEquatable<CorporateRed>
    {
        /// <summary>
        /// Gets or Sets ClientIdCorporateRed
        /// </summary>

        [DataMember(Name = "clientIdCorporateRed")]
        public string ClientIdCorporateRed { get; set; }

        /// <summary>
        /// Gets or Sets NameCorporateRed
        /// </summary>

        [DataMember(Name = "nameCorporateRed")]
        public string NameCorporateRed { get; set; }

        /// <summary>
        /// Gets or Sets PartnerShipCount
        /// </summary>

        [DataMember(Name = "partnerShipCount")]
        public int? PartnerShipCount { get; set; }

        /// <summary>
        /// Gets or Sets PartnerCount
        /// </summary>

        [DataMember(Name = "partnerCount")]
        public int? PartnerCount { get; set; }

        /// <summary>
        /// Gets or Sets PartnerShip
        /// </summary>

        [DataMember(Name = "partnerShip")]
        public List<string> PartnerShip { get; set; }

        /// <summary>
        /// Gets or Sets Spouse
        /// </summary>

        [DataMember(Name = "spouse")]
        public string Spouse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorporateRed {\n");
            sb.Append("  ClientIdCorporateRed: ").Append(ClientIdCorporateRed).Append("\n");
            sb.Append("  NameCorporateRed: ").Append(NameCorporateRed).Append("\n");
            sb.Append("  PartnerShipCount: ").Append(PartnerShipCount).Append("\n");
            sb.Append("  PartnerCount: ").Append(PartnerCount).Append("\n");
            sb.Append("  PartnerShip: ").Append(PartnerShip).Append("\n");
            sb.Append("  Spouse: ").Append(Spouse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CorporateRed)obj);
        }

        /// <summary>
        /// Returns true if CorporateRed instances are equal
        /// </summary>
        /// <param name="other">Instance of CorporateRed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorporateRed other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ClientIdCorporateRed == other.ClientIdCorporateRed ||
                    ClientIdCorporateRed != null &&
                    ClientIdCorporateRed.Equals(other.ClientIdCorporateRed)
                ) &&
                (
                    NameCorporateRed == other.NameCorporateRed ||
                    NameCorporateRed != null &&
                    NameCorporateRed.Equals(other.NameCorporateRed)
                ) &&
                (
                    PartnerShipCount == other.PartnerShipCount ||
                    PartnerShipCount != null &&
                    PartnerShipCount.Equals(other.PartnerShipCount)
                ) &&
                (
                    PartnerCount == other.PartnerCount ||
                    PartnerCount != null &&
                    PartnerCount.Equals(other.PartnerCount)
                ) &&
                (
                    PartnerShip == other.PartnerShip ||
                    PartnerShip != null &&
                    PartnerShip.SequenceEqual(other.PartnerShip)
                ) &&
                (
                    Spouse == other.Spouse ||
                    Spouse != null &&
                    Spouse.Equals(other.Spouse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ClientIdCorporateRed != null)
                    hashCode = hashCode * 59 + ClientIdCorporateRed.GetHashCode();
                if (NameCorporateRed != null)
                    hashCode = hashCode * 59 + NameCorporateRed.GetHashCode();
                if (PartnerShipCount != null)
                    hashCode = hashCode * 59 + PartnerShipCount.GetHashCode();
                if (PartnerCount != null)
                    hashCode = hashCode * 59 + PartnerCount.GetHashCode();
                if (PartnerShip != null)
                    hashCode = hashCode * 59 + PartnerShip.GetHashCode();
                if (Spouse != null)
                    hashCode = hashCode * 59 + Spouse.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CorporateRed left, CorporateRed right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CorporateRed left, CorporateRed right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
