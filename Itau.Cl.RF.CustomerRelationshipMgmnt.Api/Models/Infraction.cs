/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Infraction : IEquatable<Infraction>
    {
        /// <summary>
        /// Gets or Sets MunicipalityTried
        /// </summary>

        [DataMember(Name = "municipalityTried")]
        public string MunicipalityTried { get; set; }

        /// <summary>
        /// Gets or Sets TransitDate
        /// </summary>

        [DataMember(Name = "transitDate")]
        public long? TransitDate { get; set; }

        /// <summary>
        /// Gets or Sets ConcessionaireInfractions
        /// </summary>

        [DataMember(Name = "concessionaireInfractions")]
        public string ConcessionaireInfractions { get; set; }

        /// <summary>
        /// Gets or Sets DenunciationDate
        /// </summary>

        [DataMember(Name = "denunciationDate")]
        public long? DenunciationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Infraction {\n");
            sb.Append("  MunicipalityTried: ").Append(MunicipalityTried).Append("\n");
            sb.Append("  TransitDate: ").Append(TransitDate).Append("\n");
            sb.Append("  ConcessionaireInfractions: ").Append(ConcessionaireInfractions).Append("\n");
            sb.Append("  DenunciationDate: ").Append(DenunciationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Infraction)obj);
        }

        /// <summary>
        /// Returns true if Infraction instances are equal
        /// </summary>
        /// <param name="other">Instance of Infraction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Infraction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    MunicipalityTried == other.MunicipalityTried ||
                    MunicipalityTried != null &&
                    MunicipalityTried.Equals(other.MunicipalityTried)
                ) &&
                (
                    TransitDate == other.TransitDate ||
                    TransitDate != null &&
                    TransitDate.Equals(other.TransitDate)
                ) &&
                (
                    ConcessionaireInfractions == other.ConcessionaireInfractions ||
                    ConcessionaireInfractions != null &&
                    ConcessionaireInfractions.Equals(other.ConcessionaireInfractions)
                ) &&
                (
                    DenunciationDate == other.DenunciationDate ||
                    DenunciationDate != null &&
                    DenunciationDate.Equals(other.DenunciationDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (MunicipalityTried != null)
                    hashCode = hashCode * 59 + MunicipalityTried.GetHashCode();
                if (TransitDate != null)
                    hashCode = hashCode * 59 + TransitDate.GetHashCode();
                if (ConcessionaireInfractions != null)
                    hashCode = hashCode * 59 + ConcessionaireInfractions.GetHashCode();
                if (DenunciationDate != null)
                    hashCode = hashCode * 59 + DenunciationDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Infraction left, Infraction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Infraction left, Infraction right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
