/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Vehicle : IEquatable<Vehicle>
    {
        /// <summary>
        /// Gets or Sets YearManufactures
        /// </summary>

        [DataMember(Name = "yearManufactures")]
        public long? YearManufactures { get; set; }

        /// <summary>
        /// Gets or Sets ColorCode
        /// </summary>

        [DataMember(Name = "colorCode")]
        public long? ColorCode { get; set; }

        /// <summary>
        /// Gets or Sets BrandCode
        /// </summary>

        [DataMember(Name = "brandCode")]
        public long? BrandCode { get; set; }

        /// <summary>
        /// Gets or Sets TypeCode
        /// </summary>

        [DataMember(Name = "typeCode")]
        public long? TypeCode { get; set; }

        /// <summary>
        /// Gets or Sets ColorDescription
        /// </summary>

        [DataMember(Name = "colorDescription")]
        public string ColorDescription { get; set; }

        /// <summary>
        /// Gets or Sets BrandDescription
        /// </summary>

        [DataMember(Name = "brandDescription")]
        public string BrandDescription { get; set; }

        /// <summary>
        /// Gets or Sets ModelDescription
        /// </summary>

        [DataMember(Name = "modelDescription")]
        public string ModelDescription { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionType
        /// </summary>

        [DataMember(Name = "descriptionType")]
        public string DescriptionType { get; set; }

        /// <summary>
        /// Gets or Sets PpuVerifierDigit
        /// </summary>

        [DataMember(Name = "ppuVerifierDigit")]
        public string PpuVerifierDigit { get; set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>

        [DataMember(Name = "available")]
        public long? Available { get; set; }

        /// <summary>
        /// Gets or Sets CurrentDate
        /// </summary>

        [DataMember(Name = "currentDate")]
        public long? CurrentDate { get; set; }

        /// <summary>
        /// Gets or Sets LastDateTransfer
        /// </summary>

        [DataMember(Name = "lastDateTransfer")]
        public long? LastDateTransfer { get; set; }

        /// <summary>
        /// Gets or Sets PatPlate
        /// </summary>

        [DataMember(Name = "patPlate")]
        public string PatPlate { get; set; }

        /// <summary>
        /// Gets or Sets RestColor
        /// </summary>

        [DataMember(Name = "restColor")]
        public string RestColor { get; set; }

        /// <summary>
        /// Gets or Sets SortType
        /// </summary>

        [DataMember(Name = "sortType")]
        public string SortType { get; set; }

        /// <summary>
        /// Gets or Sets Appraisal
        /// </summary>

        [DataMember(Name = "appraisal")]
        public long? Appraisal { get; set; }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>

        [DataMember(Name = "permission")]
        public long? Permission { get; set; }

        /// <summary>
        /// Gets or Sets FinesNotPay
        /// </summary>

        [DataMember(Name = "finesNotPay")]
        public FinesNotPay FinesNotPay { get; set; }

        /// <summary>
        /// Gets or Sets TagInformation
        /// </summary>

        [DataMember(Name = "tagInformation")]
        public TagInformations TagInformation { get; set; }

        /// <summary>
        /// Gets or Sets FinesTag
        /// </summary>

        [DataMember(Name = "finesTag")]
        public FinesTag FinesTag { get; set; }

        /// <summary>
        /// Gets or Sets TagInfractions
        /// </summary>

        [DataMember(Name = "tagInfractions")]
        public TagInfractions TagInfractions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  YearManufactures: ").Append(YearManufactures).Append("\n");
            sb.Append("  ColorCode: ").Append(ColorCode).Append("\n");
            sb.Append("  BrandCode: ").Append(BrandCode).Append("\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  ColorDescription: ").Append(ColorDescription).Append("\n");
            sb.Append("  BrandDescription: ").Append(BrandDescription).Append("\n");
            sb.Append("  ModelDescription: ").Append(ModelDescription).Append("\n");
            sb.Append("  DescriptionType: ").Append(DescriptionType).Append("\n");
            sb.Append("  PpuVerifierDigit: ").Append(PpuVerifierDigit).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  CurrentDate: ").Append(CurrentDate).Append("\n");
            sb.Append("  LastDateTransfer: ").Append(LastDateTransfer).Append("\n");
            sb.Append("  PatPlate: ").Append(PatPlate).Append("\n");
            sb.Append("  RestColor: ").Append(RestColor).Append("\n");
            sb.Append("  SortType: ").Append(SortType).Append("\n");
            sb.Append("  Appraisal: ").Append(Appraisal).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  FinesNotPay: ").Append(FinesNotPay).Append("\n");
            sb.Append("  TagInformation: ").Append(TagInformation).Append("\n");
            sb.Append("  FinesTag: ").Append(FinesTag).Append("\n");
            sb.Append("  TagInfractions: ").Append(TagInfractions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Vehicle)obj);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="other">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    YearManufactures == other.YearManufactures ||
                    YearManufactures != null &&
                    YearManufactures.Equals(other.YearManufactures)
                ) &&
                (
                    ColorCode == other.ColorCode ||
                    ColorCode != null &&
                    ColorCode.Equals(other.ColorCode)
                ) &&
                (
                    BrandCode == other.BrandCode ||
                    BrandCode != null &&
                    BrandCode.Equals(other.BrandCode)
                ) &&
                (
                    TypeCode == other.TypeCode ||
                    TypeCode != null &&
                    TypeCode.Equals(other.TypeCode)
                ) &&
                (
                    ColorDescription == other.ColorDescription ||
                    ColorDescription != null &&
                    ColorDescription.Equals(other.ColorDescription)
                ) &&
                (
                    BrandDescription == other.BrandDescription ||
                    BrandDescription != null &&
                    BrandDescription.Equals(other.BrandDescription)
                ) &&
                (
                    ModelDescription == other.ModelDescription ||
                    ModelDescription != null &&
                    ModelDescription.Equals(other.ModelDescription)
                ) &&
                (
                    DescriptionType == other.DescriptionType ||
                    DescriptionType != null &&
                    DescriptionType.Equals(other.DescriptionType)
                ) &&
                (
                    PpuVerifierDigit == other.PpuVerifierDigit ||
                    PpuVerifierDigit != null &&
                    PpuVerifierDigit.Equals(other.PpuVerifierDigit)
                ) &&
                (
                    Available == other.Available ||
                    Available != null &&
                    Available.Equals(other.Available)
                ) &&
                (
                    CurrentDate == other.CurrentDate ||
                    CurrentDate != null &&
                    CurrentDate.Equals(other.CurrentDate)
                ) &&
                (
                    LastDateTransfer == other.LastDateTransfer ||
                    LastDateTransfer != null &&
                    LastDateTransfer.Equals(other.LastDateTransfer)
                ) &&
                (
                    PatPlate == other.PatPlate ||
                    PatPlate != null &&
                    PatPlate.Equals(other.PatPlate)
                ) &&
                (
                    RestColor == other.RestColor ||
                    RestColor != null &&
                    RestColor.Equals(other.RestColor)
                ) &&
                (
                    SortType == other.SortType ||
                    SortType != null &&
                    SortType.Equals(other.SortType)
                ) &&
                (
                    Appraisal == other.Appraisal ||
                    Appraisal != null &&
                    Appraisal.Equals(other.Appraisal)
                ) &&
                (
                    Permission == other.Permission ||
                    Permission != null &&
                    Permission.Equals(other.Permission)
                ) &&
                (
                    FinesNotPay == other.FinesNotPay ||
                    FinesNotPay != null &&
                    FinesNotPay.Equals(other.FinesNotPay)
                ) &&
                (
                    TagInformation == other.TagInformation ||
                    TagInformation != null &&
                    TagInformation.Equals(other.TagInformation)
                ) &&
                (
                    FinesTag == other.FinesTag ||
                    FinesTag != null &&
                    FinesTag.Equals(other.FinesTag)
                ) &&
                (
                    TagInfractions == other.TagInfractions ||
                    TagInfractions != null &&
                    TagInfractions.Equals(other.TagInfractions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (YearManufactures != null)
                    hashCode = hashCode * 59 + YearManufactures.GetHashCode();
                if (ColorCode != null)
                    hashCode = hashCode * 59 + ColorCode.GetHashCode();
                if (BrandCode != null)
                    hashCode = hashCode * 59 + BrandCode.GetHashCode();
                if (TypeCode != null)
                    hashCode = hashCode * 59 + TypeCode.GetHashCode();
                if (ColorDescription != null)
                    hashCode = hashCode * 59 + ColorDescription.GetHashCode();
                if (BrandDescription != null)
                    hashCode = hashCode * 59 + BrandDescription.GetHashCode();
                if (ModelDescription != null)
                    hashCode = hashCode * 59 + ModelDescription.GetHashCode();
                if (DescriptionType != null)
                    hashCode = hashCode * 59 + DescriptionType.GetHashCode();
                if (PpuVerifierDigit != null)
                    hashCode = hashCode * 59 + PpuVerifierDigit.GetHashCode();
                if (Available != null)
                    hashCode = hashCode * 59 + Available.GetHashCode();
                if (CurrentDate != null)
                    hashCode = hashCode * 59 + CurrentDate.GetHashCode();
                if (LastDateTransfer != null)
                    hashCode = hashCode * 59 + LastDateTransfer.GetHashCode();
                if (PatPlate != null)
                    hashCode = hashCode * 59 + PatPlate.GetHashCode();
                if (RestColor != null)
                    hashCode = hashCode * 59 + RestColor.GetHashCode();
                if (SortType != null)
                    hashCode = hashCode * 59 + SortType.GetHashCode();
                if (Appraisal != null)
                    hashCode = hashCode * 59 + Appraisal.GetHashCode();
                if (Permission != null)
                    hashCode = hashCode * 59 + Permission.GetHashCode();
                if (FinesNotPay != null)
                    hashCode = hashCode * 59 + FinesNotPay.GetHashCode();
                if (TagInformation != null)
                    hashCode = hashCode * 59 + TagInformation.GetHashCode();
                if (FinesTag != null)
                    hashCode = hashCode * 59 + FinesTag.GetHashCode();
                if (TagInfractions != null)
                    hashCode = hashCode * 59 + TagInfractions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Vehicle left, Vehicle right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Vehicle left, Vehicle right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
