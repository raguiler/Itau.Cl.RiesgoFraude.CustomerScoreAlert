/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Partner : IEquatable<Partner>
    {
        /// <summary>
        /// Gets or Sets NamePartners
        /// </summary>

        [DataMember(Name = "namePartners")]
        public string NamePartners { get; set; }

        /// <summary>
        /// Gets or Sets AmountPartners
        /// </summary>

        [DataMember(Name = "amountPartners")]
        public long? AmountPartners { get; set; }

        /// <summary>
        /// Gets or Sets PercentagePartners
        /// </summary>

        [DataMember(Name = "percentagePartners")]
        public double? PercentagePartners { get; set; }

        /// <summary>
        /// Gets or Sets TypeInput
        /// </summary>

        [DataMember(Name = "typeInput")]
        public string TypeInput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Partner {\n");
            sb.Append("  NamePartners: ").Append(NamePartners).Append("\n");
            sb.Append("  AmountPartners: ").Append(AmountPartners).Append("\n");
            sb.Append("  PercentagePartners: ").Append(PercentagePartners).Append("\n");
            sb.Append("  TypeInput: ").Append(TypeInput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Partner)obj);
        }

        /// <summary>
        /// Returns true if Partner instances are equal
        /// </summary>
        /// <param name="other">Instance of Partner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Partner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    NamePartners == other.NamePartners ||
                    NamePartners != null &&
                    NamePartners.Equals(other.NamePartners)
                ) &&
                (
                    AmountPartners == other.AmountPartners ||
                    AmountPartners != null &&
                    AmountPartners.Equals(other.AmountPartners)
                ) &&
                (
                    PercentagePartners == other.PercentagePartners ||
                    PercentagePartners != null &&
                    PercentagePartners.Equals(other.PercentagePartners)
                ) &&
                (
                    TypeInput == other.TypeInput ||
                    TypeInput != null &&
                    TypeInput.Equals(other.TypeInput)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NamePartners != null)
                    hashCode = hashCode * 59 + NamePartners.GetHashCode();
                if (AmountPartners != null)
                    hashCode = hashCode * 59 + AmountPartners.GetHashCode();
                if (PercentagePartners != null)
                    hashCode = hashCode * 59 + PercentagePartners.GetHashCode();
                if (TypeInput != null)
                    hashCode = hashCode * 59 + TypeInput.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Partner left, Partner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Partner left, Partner right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
