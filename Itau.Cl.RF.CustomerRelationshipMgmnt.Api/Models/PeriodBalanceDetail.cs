/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PeriodBalanceDetail : IEquatable<PeriodBalanceDetail>
    {
        /// <summary>
        /// Gets or Sets EconomicActivity
        /// </summary>

        [DataMember(Name = "economicActivity")]
        public EconomicActivity EconomicActivity { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>

        [DataMember(Name = "warnings")]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>

        [DataMember(Name = "bank")]
        public string Bank { get; set; }

        /// <summary>
        /// Gets or Sets GrowthCapacity
        /// </summary>

        [DataMember(Name = "growthCapacity")]
        public double? GrowthCapacity { get; set; }

        /// <summary>
        /// Gets or Sets StockKnowLedgeable
        /// </summary>

        [DataMember(Name = "stockKnowLedgeable")]
        public double? StockKnowLedgeable { get; set; }

        /// <summary>
        /// Gets or Sets CapitalEnteratedPercentual
        /// </summary>

        [DataMember(Name = "capitalEnteratedPercentual")]
        public double? CapitalEnteratedPercentual { get; set; }

        /// <summary>
        /// Gets or Sets OperationalCycle
        /// </summary>

        [DataMember(Name = "operationalCycle")]
        public double? OperationalCycle { get; set; }

        /// <summary>
        /// Gets or Sets CoverageFinancialXpenditures
        /// </summary>

        [DataMember(Name = "coverageFinancialXpenditures")]
        public double? CoverageFinancialXpenditures { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPassiveExpendableWithGov
        /// </summary>

        [DataMember(Name = "paymentPassiveExpendableWithGov")]
        public double? PaymentPassiveExpendableWithGov { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPassiveExpendableWithSales
        /// </summary>

        [DataMember(Name = "paymentPassiveExpendableWithSales")]
        public double? PaymentPassiveExpendableWithSales { get; set; }

        /// <summary>
        /// Gets or Sets CommuneCommercialInfo
        /// </summary>

        [DataMember(Name = "communeCommercialInfo")]
        public string CommuneCommercialInfo { get; set; }

        /// <summary>
        /// Gets or Sets CorrectionMonetaryNeta
        /// </summary>

        [DataMember(Name = "correctionMonetaryNeta")]
        public double? CorrectionMonetaryNeta { get; set; }

        /// <summary>
        /// Gets or Sets CorrectionMonetaryNetaGob
        /// </summary>

        [DataMember(Name = "correctionMonetaryNetaGob")]
        public double? CorrectionMonetaryNetaGob { get; set; }

        /// <summary>
        /// Gets or Sets CorrectionMonetaryNetaPercentual
        /// </summary>

        [DataMember(Name = "correctionMonetaryNetaPercentual")]
        public double? CorrectionMonetaryNetaPercentual { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>

        [DataMember(Name = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets DepreciationGob
        /// </summary>

        [DataMember(Name = "depreciationGob")]
        public double? DepreciationGob { get; set; }

        /// <summary>
        /// Gets or Sets Residency
        /// </summary>

        [DataMember(Name = "residency")]
        public string Residency { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>

        [DataMember(Name = "fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets ExpensesAdministrationSales
        /// </summary>

        [DataMember(Name = "expensesAdministrationSales")]
        public double? ExpensesAdministrationSales { get; set; }

        /// <summary>
        /// Gets or Sets ExpensesAdministrationSalesPercentual
        /// </summary>

        [DataMember(Name = "expensesAdministrationSalesPercentual")]
        public double? ExpensesAdministrationSalesPercentual { get; set; }

        /// <summary>
        /// Gets or Sets FinancialExpensesSales
        /// </summary>

        [DataMember(Name = "financialExpensesSales")]
        public double? FinancialExpensesSales { get; set; }

        /// <summary>
        /// Gets or Sets Gob
        /// </summary>

        [DataMember(Name = "gob")]
        public double? Gob { get; set; }

        /// <summary>
        /// Gets or Sets GobSales
        /// </summary>

        [DataMember(Name = "gobSales")]
        public double? GobSales { get; set; }

        /// <summary>
        /// Gets or Sets DegreeCommitmentActiveFix
        /// </summary>

        [DataMember(Name = "degreeCommitmentActiveFix")]
        public double? DegreeCommitmentActiveFix { get; set; }

        /// <summary>
        /// Gets or Sets DegreeCommitmentActiveTangible
        /// </summary>

        [DataMember(Name = "degreeCommitmentActiveTangible")]
        public double? DegreeCommitmentActiveTangible { get; set; }

        /// <summary>
        /// Gets or Sets IncomeTax
        /// </summary>

        [DataMember(Name = "incomeTax")]
        public double? IncomeTax { get; set; }

        /// <summary>
        /// Gets or Sets TaxPercent
        /// </summary>

        [DataMember(Name = "taxPercent")]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// Gets or Sets InterestPaid
        /// </summary>

        [DataMember(Name = "interestPaid")]
        public double? InterestPaid { get; set; }

        /// <summary>
        /// Gets or Sets InterestsPatingsPercentual
        /// </summary>

        [DataMember(Name = "interestsPatingsPercentual")]
        public double? InterestsPatingsPercentual { get; set; }

        /// <summary>
        /// Gets or Sets AcidLiquidity
        /// </summary>

        [DataMember(Name = "acidLiquidity")]
        public double? AcidLiquidity { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLiquidity
        /// </summary>

        [DataMember(Name = "currentLiquidity")]
        public double? CurrentLiquidity { get; set; }

        /// <summary>
        /// Gets or Sets NameCorporateCommercialInfo
        /// </summary>

        [DataMember(Name = "nameCorporateCommercialInfo")]
        public string NameCorporateCommercialInfo { get; set; }

        /// <summary>
        /// Gets or Sets OtherIncomePercent
        /// </summary>

        [DataMember(Name = "otherIncomePercent")]
        public double? OtherIncomePercent { get; set; }

        /// <summary>
        /// Gets or Sets AverageCobro
        /// </summary>

        [DataMember(Name = "averageCobro")]
        public double? AverageCobro { get; set; }

        /// <summary>
        /// Gets or Sets AverageInventory
        /// </summary>

        [DataMember(Name = "averageInventory")]
        public double? AverageInventory { get; set; }

        /// <summary>
        /// Gets or Sets AveragePaymentProviders
        /// </summary>

        [DataMember(Name = "averagePaymentProviders")]
        public double? AveragePaymentProviders { get; set; }

        /// <summary>
        /// Gets or Sets Banks
        /// </summary>

        [DataMember(Name = "banks")]
        public double? Banks { get; set; }

        /// <summary>
        /// Gets or Sets PercentBanks
        /// </summary>

        [DataMember(Name = "percentBanks")]
        public double? PercentBanks { get; set; }

        /// <summary>
        /// Gets or Sets Box
        /// </summary>

        [DataMember(Name = "box")]
        public double? Box { get; set; }

        /// <summary>
        /// Gets or Sets PercentBox
        /// </summary>

        [DataMember(Name = "percentBox")]
        public double? PercentBox { get; set; }

        /// <summary>
        /// Gets or Sets CostOfExploitation
        /// </summary>

        [DataMember(Name = "costOfExploitation")]
        public double? CostOfExploitation { get; set; }

        /// <summary>
        /// Gets or Sets CostExploitationPercentual
        /// </summary>

        [DataMember(Name = "costExploitationPercentual")]
        public double? CostExploitationPercentual { get; set; }

        /// <summary>
        /// Gets or Sets AccountsReceivable
        /// </summary>

        [DataMember(Name = "accountsReceivable")]
        public double? AccountsReceivable { get; set; }

        /// <summary>
        /// Gets or Sets AccountsReceivableCompaniesRelated
        /// </summary>

        [DataMember(Name = "accountsReceivableCompaniesRelated")]
        public double? AccountsReceivableCompaniesRelated { get; set; }

        /// <summary>
        /// Gets or Sets AccountsReceivableRelatedPercentual
        /// </summary>

        [DataMember(Name = "accountsReceivableRelatedPercentual")]
        public double? AccountsReceivableRelatedPercentual { get; set; }

        /// <summary>
        /// Gets or Sets AccountsReceivablePercentual
        /// </summary>

        [DataMember(Name = "accountsReceivablePercentual")]
        public double? AccountsReceivablePercentual { get; set; }

        /// <summary>
        /// Gets or Sets DebtsByPay
        /// </summary>

        [DataMember(Name = "debtsByPay")]
        public double? DebtsByPay { get; set; }

        /// <summary>
        /// Gets or Sets AccountsByPayPershipsRelated
        /// </summary>

        [DataMember(Name = "accountsByPayPershipsRelated")]
        public double? AccountsByPayPershipsRelated { get; set; }

        /// <summary>
        /// Gets or Sets AccountsByPayCompaniesRelatedPercentual
        /// </summary>

        [DataMember(Name = "accountsByPayCompaniesRelatedPercentual")]
        public double? AccountsByPayCompaniesRelatedPercentual { get; set; }

        /// <summary>
        /// Gets or Sets AccountsByPayPercent
        /// </summary>

        [DataMember(Name = "accountsByPayPercent")]
        public double? AccountsByPayPercent { get; set; }

        /// <summary>
        /// Gets or Sets Depreciation
        /// </summary>

        [DataMember(Name = "depreciation")]
        public double? Depreciation { get; set; }

        /// <summary>
        /// Gets or Sets PercentageDepreciation
        /// </summary>

        [DataMember(Name = "percentageDepreciation")]
        public double? PercentageDepreciation { get; set; }

        /// <summary>
        /// Gets or Sets DifferenceBalance
        /// </summary>

        [DataMember(Name = "differenceBalance")]
        public double? DifferenceBalance { get; set; }

        /// <summary>
        /// Gets or Sets DifferenceBalancePercentual
        /// </summary>

        [DataMember(Name = "differenceBalancePercentual")]
        public double? DifferenceBalancePercentual { get; set; }

        /// <summary>
        /// Gets or Sets Folio
        /// </summary>

        [DataMember(Name = "folio")]
        public string Folio { get; set; }

        /// <summary>
        /// Gets or Sets IndiceEndedationSummary
        /// </summary>

        [DataMember(Name = "indiceEndedationSummary")]
        public double? IndiceEndedationSummary { get; set; }

        /// <summary>
        /// Gets or Sets IndexLiquiditySummary
        /// </summary>

        [DataMember(Name = "indexLiquiditySummary")]
        public double? IndexLiquiditySummary { get; set; }

        /// <summary>
        /// Gets or Sets InterestsReceived
        /// </summary>

        [DataMember(Name = "interestsReceived")]
        public double? InterestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets InterestsReceivedPercentual
        /// </summary>

        [DataMember(Name = "interestsReceivedPercentual")]
        public double? InterestsReceivedPercentual { get; set; }

        /// <summary>
        /// Gets or Sets Inventories
        /// </summary>

        [DataMember(Name = "inventories")]
        public double? Inventories { get; set; }

        /// <summary>
        /// Gets or Sets InventoriesPercent
        /// </summary>

        [DataMember(Name = "inventoriesPercent")]
        public double? InventoriesPercent { get; set; }

        /// <summary>
        /// Gets or Sets MonthsPeriod
        /// </summary>

        [DataMember(Name = "monthsPeriod")]
        public double? MonthsPeriod { get; set; }

        /// <summary>
        /// Gets or Sets OtherAccountsPaymentNotExegible
        /// </summary>

        [DataMember(Name = "otherAccountsPaymentNotExegible")]
        public double? OtherAccountsPaymentNotExegible { get; set; }

        /// <summary>
        /// Gets or Sets OtherAccountsPativeNotExchangePercen
        /// </summary>

        [DataMember(Name = "otherAccountsPativeNotExchangePercen")]
        public double? OtherAccountsPativeNotExchangePercen { get; set; }

        /// <summary>
        /// Gets or Sets OtherAssets
        /// </summary>

        [DataMember(Name = "otherAssets")]
        public double? OtherAssets { get; set; }

        /// <summary>
        /// Gets or Sets OtherActivesPercentual
        /// </summary>

        [DataMember(Name = "otherActivesPercentual")]
        public double? OtherActivesPercentual { get; set; }

        /// <summary>
        /// Gets or Sets OtherCirculating
        /// </summary>

        [DataMember(Name = "otherCirculating")]
        public double? OtherCirculating { get; set; }

        /// <summary>
        /// Gets or Sets OtherCirculantsPercentual
        /// </summary>

        [DataMember(Name = "otherCirculantsPercentual")]
        public double? OtherCirculantsPercentual { get; set; }

        /// <summary>
        /// Gets or Sets OtherIncome
        /// </summary>

        [DataMember(Name = "otherIncome")]
        public double? OtherIncome { get; set; }

        /// <summary>
        /// Gets or Sets OtherPasivesCirculating
        /// </summary>

        [DataMember(Name = "otherPasivesCirculating")]
        public double? OtherPasivesCirculating { get; set; }

        /// <summary>
        /// Gets or Sets OtherPassivesCirculatingPercentual
        /// </summary>

        [DataMember(Name = "otherPassivesCirculatingPercentual")]
        public double? OtherPassivesCirculatingPercentual { get; set; }

        /// <summary>
        /// Gets or Sets PatrimonyNetoSummary
        /// </summary>

        [DataMember(Name = "patrimonyNetoSummary")]
        public double? PatrimonyNetoSummary { get; set; }

        /// <summary>
        /// Gets or Sets PercentagePatrimony
        /// </summary>

        [DataMember(Name = "percentagePatrimony")]
        public double? PercentagePatrimony { get; set; }

        /// <summary>
        /// Gets or Sets Patrimony
        /// </summary>

        [DataMember(Name = "patrimony")]
        public double? Patrimony { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>

        [DataMember(Name = "period")]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets PpmProvisionsOther
        /// </summary>

        [DataMember(Name = "ppmProvisionsOther")]
        public double? PpmProvisionsOther { get; set; }

        /// <summary>
        /// Gets or Sets PpmProvisionsOtherPercentual
        /// </summary>

        [DataMember(Name = "ppmProvisionsOtherPercentual")]
        public double? PpmProvisionsOtherPercentual { get; set; }

        /// <summary>
        /// Gets or Sets AverageCobranzaSummary
        /// </summary>

        [DataMember(Name = "averageCobranzaSummary")]
        public double? AverageCobranzaSummary { get; set; }

        /// <summary>
        /// Gets or Sets AverageInventorySummary
        /// </summary>

        [DataMember(Name = "averageInventorySummary")]
        public double? AverageInventorySummary { get; set; }

        /// <summary>
        /// Gets or Sets OperationalResult
        /// </summary>

        [DataMember(Name = "operationalResult")]
        public double? OperationalResult { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceOperationalPercentual
        /// </summary>

        [DataMember(Name = "performanceOperationalPercentual")]
        public double? PerformanceOperationalPercentual { get; set; }

        /// <summary>
        /// Gets or Sets Retreats
        /// </summary>

        [DataMember(Name = "retreats")]
        public double? Retreats { get; set; }

        /// <summary>
        /// Gets or Sets LeavePercent
        /// </summary>

        [DataMember(Name = "leavePercent")]
        public double? LeavePercent { get; set; }

        /// <summary>
        /// Gets or Sets TotalActiveCirculating
        /// </summary>

        [DataMember(Name = "totalActiveCirculating")]
        public double? TotalActiveCirculating { get; set; }

        /// <summary>
        /// Gets or Sets TotalActiveCirculatingPercentual
        /// </summary>

        [DataMember(Name = "totalActiveCirculatingPercentual")]
        public double? TotalActiveCirculatingPercentual { get; set; }

        /// <summary>
        /// Gets or Sets TotalActiveFixedNeto
        /// </summary>

        [DataMember(Name = "totalActiveFixedNeto")]
        public double? TotalActiveFixedNeto { get; set; }

        /// <summary>
        /// Gets or Sets TotalActiveFixedNetoPercentual
        /// </summary>

        [DataMember(Name = "totalActiveFixedNetoPercentual")]
        public double? TotalActiveFixedNetoPercentual { get; set; }

        /// <summary>
        /// Gets or Sets TotalActivoFixedNetoSummary
        /// </summary>

        [DataMember(Name = "totalActivoFixedNetoSummary")]
        public double? TotalActivoFixedNetoSummary { get; set; }

        /// <summary>
        /// Gets or Sets TotalActive
        /// </summary>

        [DataMember(Name = "totalActive")]
        public double? TotalActive { get; set; }

        /// <summary>
        /// Gets or Sets TotalActivesPercentual
        /// </summary>

        [DataMember(Name = "totalActivesPercentual")]
        public double? TotalActivesPercentual { get; set; }

        /// <summary>
        /// Gets or Sets TotalActivesSummary
        /// </summary>

        [DataMember(Name = "totalActivesSummary")]
        public double? TotalActivesSummary { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherActives
        /// </summary>

        [DataMember(Name = "totalOtherActives")]
        public double? TotalOtherActives { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherActivesPercentual
        /// </summary>

        [DataMember(Name = "totalOtherActivesPercentual")]
        public double? TotalOtherActivesPercentual { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassive
        /// </summary>

        [DataMember(Name = "totalPassive")]
        public double? TotalPassive { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassiveExpendable
        /// </summary>

        [DataMember(Name = "totalPassiveExpendable")]
        public double? TotalPassiveExpendable { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassiveExpendablePercentual
        /// </summary>

        [DataMember(Name = "totalPassiveExpendablePercentual")]
        public double? TotalPassiveExpendablePercentual { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassiveExpendableSummary
        /// </summary>

        [DataMember(Name = "totalPassiveExpendableSummary")]
        public double? TotalPassiveExpendableSummary { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassivePercentual
        /// </summary>

        [DataMember(Name = "totalPassivePercentual")]
        public double? TotalPassivePercentual { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassiveCirculating
        /// </summary>

        [DataMember(Name = "totalPassiveCirculating")]
        public double? TotalPassiveCirculating { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassiveCirculatingPercentual
        /// </summary>

        [DataMember(Name = "totalPassiveCirculatingPercentual")]
        public double? TotalPassiveCirculatingPercentual { get; set; }

        /// <summary>
        /// Gets or Sets UtilityExercise
        /// </summary>

        [DataMember(Name = "utilityExercise")]
        public double? UtilityExercise { get; set; }

        /// <summary>
        /// Gets or Sets UtilityExercisePercentual
        /// </summary>

        [DataMember(Name = "utilityExercisePercentual")]
        public double? UtilityExercisePercentual { get; set; }

        /// <summary>
        /// Gets or Sets UtilityNetaSummary
        /// </summary>

        [DataMember(Name = "utilityNetaSummary")]
        public double? UtilityNetaSummary { get; set; }

        /// <summary>
        /// Gets or Sets UtilityNetaSalesSummary
        /// </summary>

        [DataMember(Name = "utilityNetaSalesSummary")]
        public double? UtilityNetaSalesSummary { get; set; }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>

        [DataMember(Name = "sales")]
        public double? Sales { get; set; }

        /// <summary>
        /// Gets or Sets UtilityNetasSummary
        /// </summary>

        [DataMember(Name = "utilityNetasSummary")]
        public double? UtilityNetasSummary { get; set; }

        /// <summary>
        /// Gets or Sets SalesPercentual
        /// </summary>

        [DataMember(Name = "salesPercentual")]
        public double? SalesPercentual { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>

        [DataMember(Name = "rating")]
        public BalanceRating Rating { get; set; }

        /// <summary>
        /// Gets or Sets RegionCommercialInfo
        /// </summary>

        [DataMember(Name = "regionCommercialInfo")]
        public string RegionCommercialInfo { get; set; }

        /// <summary>
        /// Gets or Sets ResultBeforeTax
        /// </summary>

        [DataMember(Name = "resultBeforeTax")]
        public double? ResultBeforeTax { get; set; }

        /// <summary>
        /// Gets or Sets ResultBeforeTaxPercentual
        /// </summary>

        [DataMember(Name = "resultBeforeTaxPercentual")]
        public double? ResultBeforeTaxPercentual { get; set; }

        /// <summary>
        /// Gets or Sets ResultExploitation
        /// </summary>

        [DataMember(Name = "resultExploitation")]
        public double? ResultExploitation { get; set; }

        /// <summary>
        /// Gets or Sets ResultExploitationPercentual
        /// </summary>

        [DataMember(Name = "resultExploitationPercentual")]
        public double? ResultExploitationPercentual { get; set; }

        /// <summary>
        /// Gets or Sets ExitUtility
        /// </summary>

        [DataMember(Name = "exitUtility")]
        public double? ExitUtility { get; set; }

        /// <summary>
        /// Gets or Sets RotationCapitalWork
        /// </summary>

        [DataMember(Name = "rotationCapitalWork")]
        public double? RotationCapitalWork { get; set; }

        /// <summary>
        /// Gets or Sets RotacionAccountsReceivable
        /// </summary>

        [DataMember(Name = "rotacionAccountsReceivable")]
        public double? RotacionAccountsReceivable { get; set; }

        /// <summary>
        /// Gets or Sets RotacionAccountsPayments
        /// </summary>

        [DataMember(Name = "rotacionAccountsPayments")]
        public double? RotacionAccountsPayments { get; set; }

        /// <summary>
        /// Gets or Sets RotationInventory
        /// </summary>

        [DataMember(Name = "rotationInventory")]
        public double? RotationInventory { get; set; }

        /// <summary>
        /// Gets or Sets ClientIdCommercialInfo
        /// </summary>

        [DataMember(Name = "clientIdCommercialInfo")]
        public int? ClientIdCommercialInfo { get; set; }

        /// <summary>
        /// Gets or Sets ClientIdRepresentanteLegal
        /// </summary>

        [DataMember(Name = "clientIdRepresentanteLegal")]
        public string ClientIdRepresentanteLegal { get; set; }

        /// <summary>
        /// Gets or Sets Solvency
        /// </summary>

        [DataMember(Name = "solvency")]
        public double? Solvency { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>

        [DataMember(Name = "size")]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>

        [DataMember(Name = "telephone")]
        public string Telephone { get; set; }

        /// <summary>
        /// Gets or Sets TypeBankAccount
        /// </summary>

        [DataMember(Name = "typeBankAccount")]
        public string TypeBankAccount { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassiveExpendablePatrimony
        /// </summary>

        [DataMember(Name = "totalPassiveExpendablePatrimony")]
        public double? TotalPassiveExpendablePatrimony { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassiveExpendableTotalActive
        /// </summary>

        [DataMember(Name = "totalPassiveExpendableTotalActive")]
        public double? TotalPassiveExpendableTotalActive { get; set; }

        /// <summary>
        /// Gets or Sets UtilityNet
        /// </summary>

        [DataMember(Name = "utilityNet")]
        public double? UtilityNet { get; set; }

        /// <summary>
        /// Gets or Sets UtilityNetPercentual
        /// </summary>

        [DataMember(Name = "utilityNetPercentual")]
        public double? UtilityNetPercentual { get; set; }

        /// <summary>
        /// Gets or Sets UtilityNetTotalActive
        /// </summary>

        [DataMember(Name = "utilityNetTotalActive")]
        public double? UtilityNetTotalActive { get; set; }

        /// <summary>
        /// Gets or Sets UtilityPatrimony
        /// </summary>

        [DataMember(Name = "utilityPatrimony")]
        public double? UtilityPatrimony { get; set; }

        /// <summary>
        /// Gets or Sets LostUtilityNetaGob
        /// </summary>

        [DataMember(Name = "lostUtilityNetaGob")]
        public double? LostUtilityNetaGob { get; set; }

        /// <summary>
        /// Gets or Sets SalesUtility
        /// </summary>

        [DataMember(Name = "salesUtility")]
        public double? SalesUtility { get; set; }

        /// <summary>
        /// Gets or Sets VariationOfSales
        /// </summary>

        [DataMember(Name = "variationOfSales")]
        public double? VariationOfSales { get; set; }

        /// <summary>
        /// Gets or Sets SalesActiveFijoNeto
        /// </summary>

        [DataMember(Name = "salesActiveFijoNeto")]
        public double? SalesActiveFijoNeto { get; set; }

        /// <summary>
        /// Gets or Sets SalesTotalIngress
        /// </summary>

        [DataMember(Name = "salesTotalIngress")]
        public double? SalesTotalIngress { get; set; }

        /// <summary>
        /// Gets or Sets ViabilityFinancia
        /// </summary>

        [DataMember(Name = "viabilityFinancia")]
        public double? ViabilityFinancia { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PeriodBalanceDetail {\n");
            sb.Append("  EconomicActivity: ").Append(EconomicActivity).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  GrowthCapacity: ").Append(GrowthCapacity).Append("\n");
            sb.Append("  StockKnowLedgeable: ").Append(StockKnowLedgeable).Append("\n");
            sb.Append("  CapitalEnteratedPercentual: ").Append(CapitalEnteratedPercentual).Append("\n");
            sb.Append("  OperationalCycle: ").Append(OperationalCycle).Append("\n");
            sb.Append("  CoverageFinancialXpenditures: ").Append(CoverageFinancialXpenditures).Append("\n");
            sb.Append("  PaymentPassiveExpendableWithGov: ").Append(PaymentPassiveExpendableWithGov).Append("\n");
            sb.Append("  PaymentPassiveExpendableWithSales: ").Append(PaymentPassiveExpendableWithSales).Append("\n");
            sb.Append("  CommuneCommercialInfo: ").Append(CommuneCommercialInfo).Append("\n");
            sb.Append("  CorrectionMonetaryNeta: ").Append(CorrectionMonetaryNeta).Append("\n");
            sb.Append("  CorrectionMonetaryNetaGob: ").Append(CorrectionMonetaryNetaGob).Append("\n");
            sb.Append("  CorrectionMonetaryNetaPercentual: ").Append(CorrectionMonetaryNetaPercentual).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  DepreciationGob: ").Append(DepreciationGob).Append("\n");
            sb.Append("  Residency: ").Append(Residency).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  ExpensesAdministrationSales: ").Append(ExpensesAdministrationSales).Append("\n");
            sb.Append("  ExpensesAdministrationSalesPercentual: ").Append(ExpensesAdministrationSalesPercentual).Append("\n");
            sb.Append("  FinancialExpensesSales: ").Append(FinancialExpensesSales).Append("\n");
            sb.Append("  Gob: ").Append(Gob).Append("\n");
            sb.Append("  GobSales: ").Append(GobSales).Append("\n");
            sb.Append("  DegreeCommitmentActiveFix: ").Append(DegreeCommitmentActiveFix).Append("\n");
            sb.Append("  DegreeCommitmentActiveTangible: ").Append(DegreeCommitmentActiveTangible).Append("\n");
            sb.Append("  IncomeTax: ").Append(IncomeTax).Append("\n");
            sb.Append("  TaxPercent: ").Append(TaxPercent).Append("\n");
            sb.Append("  InterestPaid: ").Append(InterestPaid).Append("\n");
            sb.Append("  InterestsPatingsPercentual: ").Append(InterestsPatingsPercentual).Append("\n");
            sb.Append("  AcidLiquidity: ").Append(AcidLiquidity).Append("\n");
            sb.Append("  CurrentLiquidity: ").Append(CurrentLiquidity).Append("\n");
            sb.Append("  NameCorporateCommercialInfo: ").Append(NameCorporateCommercialInfo).Append("\n");
            sb.Append("  OtherIncomePercent: ").Append(OtherIncomePercent).Append("\n");
            sb.Append("  AverageCobro: ").Append(AverageCobro).Append("\n");
            sb.Append("  AverageInventory: ").Append(AverageInventory).Append("\n");
            sb.Append("  AveragePaymentProviders: ").Append(AveragePaymentProviders).Append("\n");
            sb.Append("  Banks: ").Append(Banks).Append("\n");
            sb.Append("  PercentBanks: ").Append(PercentBanks).Append("\n");
            sb.Append("  Box: ").Append(Box).Append("\n");
            sb.Append("  PercentBox: ").Append(PercentBox).Append("\n");
            sb.Append("  CostOfExploitation: ").Append(CostOfExploitation).Append("\n");
            sb.Append("  CostExploitationPercentual: ").Append(CostExploitationPercentual).Append("\n");
            sb.Append("  AccountsReceivable: ").Append(AccountsReceivable).Append("\n");
            sb.Append("  AccountsReceivableCompaniesRelated: ").Append(AccountsReceivableCompaniesRelated).Append("\n");
            sb.Append("  AccountsReceivableRelatedPercentual: ").Append(AccountsReceivableRelatedPercentual).Append("\n");
            sb.Append("  AccountsReceivablePercentual: ").Append(AccountsReceivablePercentual).Append("\n");
            sb.Append("  DebtsByPay: ").Append(DebtsByPay).Append("\n");
            sb.Append("  AccountsByPayPershipsRelated: ").Append(AccountsByPayPershipsRelated).Append("\n");
            sb.Append("  AccountsByPayCompaniesRelatedPercentual: ").Append(AccountsByPayCompaniesRelatedPercentual).Append("\n");
            sb.Append("  AccountsByPayPercent: ").Append(AccountsByPayPercent).Append("\n");
            sb.Append("  Depreciation: ").Append(Depreciation).Append("\n");
            sb.Append("  PercentageDepreciation: ").Append(PercentageDepreciation).Append("\n");
            sb.Append("  DifferenceBalance: ").Append(DifferenceBalance).Append("\n");
            sb.Append("  DifferenceBalancePercentual: ").Append(DifferenceBalancePercentual).Append("\n");
            sb.Append("  Folio: ").Append(Folio).Append("\n");
            sb.Append("  IndiceEndedationSummary: ").Append(IndiceEndedationSummary).Append("\n");
            sb.Append("  IndexLiquiditySummary: ").Append(IndexLiquiditySummary).Append("\n");
            sb.Append("  InterestsReceived: ").Append(InterestsReceived).Append("\n");
            sb.Append("  InterestsReceivedPercentual: ").Append(InterestsReceivedPercentual).Append("\n");
            sb.Append("  Inventories: ").Append(Inventories).Append("\n");
            sb.Append("  InventoriesPercent: ").Append(InventoriesPercent).Append("\n");
            sb.Append("  MonthsPeriod: ").Append(MonthsPeriod).Append("\n");
            sb.Append("  OtherAccountsPaymentNotExegible: ").Append(OtherAccountsPaymentNotExegible).Append("\n");
            sb.Append("  OtherAccountsPativeNotExchangePercen: ").Append(OtherAccountsPativeNotExchangePercen).Append("\n");
            sb.Append("  OtherAssets: ").Append(OtherAssets).Append("\n");
            sb.Append("  OtherActivesPercentual: ").Append(OtherActivesPercentual).Append("\n");
            sb.Append("  OtherCirculating: ").Append(OtherCirculating).Append("\n");
            sb.Append("  OtherCirculantsPercentual: ").Append(OtherCirculantsPercentual).Append("\n");
            sb.Append("  OtherIncome: ").Append(OtherIncome).Append("\n");
            sb.Append("  OtherPasivesCirculating: ").Append(OtherPasivesCirculating).Append("\n");
            sb.Append("  OtherPassivesCirculatingPercentual: ").Append(OtherPassivesCirculatingPercentual).Append("\n");
            sb.Append("  PatrimonyNetoSummary: ").Append(PatrimonyNetoSummary).Append("\n");
            sb.Append("  PercentagePatrimony: ").Append(PercentagePatrimony).Append("\n");
            sb.Append("  Patrimony: ").Append(Patrimony).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PpmProvisionsOther: ").Append(PpmProvisionsOther).Append("\n");
            sb.Append("  PpmProvisionsOtherPercentual: ").Append(PpmProvisionsOtherPercentual).Append("\n");
            sb.Append("  AverageCobranzaSummary: ").Append(AverageCobranzaSummary).Append("\n");
            sb.Append("  AverageInventorySummary: ").Append(AverageInventorySummary).Append("\n");
            sb.Append("  OperationalResult: ").Append(OperationalResult).Append("\n");
            sb.Append("  PerformanceOperationalPercentual: ").Append(PerformanceOperationalPercentual).Append("\n");
            sb.Append("  Retreats: ").Append(Retreats).Append("\n");
            sb.Append("  LeavePercent: ").Append(LeavePercent).Append("\n");
            sb.Append("  TotalActiveCirculating: ").Append(TotalActiveCirculating).Append("\n");
            sb.Append("  TotalActiveCirculatingPercentual: ").Append(TotalActiveCirculatingPercentual).Append("\n");
            sb.Append("  TotalActiveFixedNeto: ").Append(TotalActiveFixedNeto).Append("\n");
            sb.Append("  TotalActiveFixedNetoPercentual: ").Append(TotalActiveFixedNetoPercentual).Append("\n");
            sb.Append("  TotalActivoFixedNetoSummary: ").Append(TotalActivoFixedNetoSummary).Append("\n");
            sb.Append("  TotalActive: ").Append(TotalActive).Append("\n");
            sb.Append("  TotalActivesPercentual: ").Append(TotalActivesPercentual).Append("\n");
            sb.Append("  TotalActivesSummary: ").Append(TotalActivesSummary).Append("\n");
            sb.Append("  TotalOtherActives: ").Append(TotalOtherActives).Append("\n");
            sb.Append("  TotalOtherActivesPercentual: ").Append(TotalOtherActivesPercentual).Append("\n");
            sb.Append("  TotalPassive: ").Append(TotalPassive).Append("\n");
            sb.Append("  TotalPassiveExpendable: ").Append(TotalPassiveExpendable).Append("\n");
            sb.Append("  TotalPassiveExpendablePercentual: ").Append(TotalPassiveExpendablePercentual).Append("\n");
            sb.Append("  TotalPassiveExpendableSummary: ").Append(TotalPassiveExpendableSummary).Append("\n");
            sb.Append("  TotalPassivePercentual: ").Append(TotalPassivePercentual).Append("\n");
            sb.Append("  TotalPassiveCirculating: ").Append(TotalPassiveCirculating).Append("\n");
            sb.Append("  TotalPassiveCirculatingPercentual: ").Append(TotalPassiveCirculatingPercentual).Append("\n");
            sb.Append("  UtilityExercise: ").Append(UtilityExercise).Append("\n");
            sb.Append("  UtilityExercisePercentual: ").Append(UtilityExercisePercentual).Append("\n");
            sb.Append("  UtilityNetaSummary: ").Append(UtilityNetaSummary).Append("\n");
            sb.Append("  UtilityNetaSalesSummary: ").Append(UtilityNetaSalesSummary).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  UtilityNetasSummary: ").Append(UtilityNetasSummary).Append("\n");
            sb.Append("  SalesPercentual: ").Append(SalesPercentual).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RegionCommercialInfo: ").Append(RegionCommercialInfo).Append("\n");
            sb.Append("  ResultBeforeTax: ").Append(ResultBeforeTax).Append("\n");
            sb.Append("  ResultBeforeTaxPercentual: ").Append(ResultBeforeTaxPercentual).Append("\n");
            sb.Append("  ResultExploitation: ").Append(ResultExploitation).Append("\n");
            sb.Append("  ResultExploitationPercentual: ").Append(ResultExploitationPercentual).Append("\n");
            sb.Append("  ExitUtility: ").Append(ExitUtility).Append("\n");
            sb.Append("  RotationCapitalWork: ").Append(RotationCapitalWork).Append("\n");
            sb.Append("  RotacionAccountsReceivable: ").Append(RotacionAccountsReceivable).Append("\n");
            sb.Append("  RotacionAccountsPayments: ").Append(RotacionAccountsPayments).Append("\n");
            sb.Append("  RotationInventory: ").Append(RotationInventory).Append("\n");
            sb.Append("  ClientIdCommercialInfo: ").Append(ClientIdCommercialInfo).Append("\n");
            sb.Append("  ClientIdRepresentanteLegal: ").Append(ClientIdRepresentanteLegal).Append("\n");
            sb.Append("  Solvency: ").Append(Solvency).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  TypeBankAccount: ").Append(TypeBankAccount).Append("\n");
            sb.Append("  TotalPassiveExpendablePatrimony: ").Append(TotalPassiveExpendablePatrimony).Append("\n");
            sb.Append("  TotalPassiveExpendableTotalActive: ").Append(TotalPassiveExpendableTotalActive).Append("\n");
            sb.Append("  UtilityNet: ").Append(UtilityNet).Append("\n");
            sb.Append("  UtilityNetPercentual: ").Append(UtilityNetPercentual).Append("\n");
            sb.Append("  UtilityNetTotalActive: ").Append(UtilityNetTotalActive).Append("\n");
            sb.Append("  UtilityPatrimony: ").Append(UtilityPatrimony).Append("\n");
            sb.Append("  LostUtilityNetaGob: ").Append(LostUtilityNetaGob).Append("\n");
            sb.Append("  SalesUtility: ").Append(SalesUtility).Append("\n");
            sb.Append("  VariationOfSales: ").Append(VariationOfSales).Append("\n");
            sb.Append("  SalesActiveFijoNeto: ").Append(SalesActiveFijoNeto).Append("\n");
            sb.Append("  SalesTotalIngress: ").Append(SalesTotalIngress).Append("\n");
            sb.Append("  ViabilityFinancia: ").Append(ViabilityFinancia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PeriodBalanceDetail)obj);
        }

        /// <summary>
        /// Returns true if PeriodBalanceDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of PeriodBalanceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodBalanceDetail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    EconomicActivity == other.EconomicActivity ||
                    EconomicActivity != null &&
                    EconomicActivity.Equals(other.EconomicActivity)
                ) &&
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                ) &&
                (
                    Bank == other.Bank ||
                    Bank != null &&
                    Bank.Equals(other.Bank)
                ) &&
                (
                    GrowthCapacity == other.GrowthCapacity ||
                    GrowthCapacity != null &&
                    GrowthCapacity.Equals(other.GrowthCapacity)
                ) &&
                (
                    StockKnowLedgeable == other.StockKnowLedgeable ||
                    StockKnowLedgeable != null &&
                    StockKnowLedgeable.Equals(other.StockKnowLedgeable)
                ) &&
                (
                    CapitalEnteratedPercentual == other.CapitalEnteratedPercentual ||
                    CapitalEnteratedPercentual != null &&
                    CapitalEnteratedPercentual.Equals(other.CapitalEnteratedPercentual)
                ) &&
                (
                    OperationalCycle == other.OperationalCycle ||
                    OperationalCycle != null &&
                    OperationalCycle.Equals(other.OperationalCycle)
                ) &&
                (
                    CoverageFinancialXpenditures == other.CoverageFinancialXpenditures ||
                    CoverageFinancialXpenditures != null &&
                    CoverageFinancialXpenditures.Equals(other.CoverageFinancialXpenditures)
                ) &&
                (
                    PaymentPassiveExpendableWithGov == other.PaymentPassiveExpendableWithGov ||
                    PaymentPassiveExpendableWithGov != null &&
                    PaymentPassiveExpendableWithGov.Equals(other.PaymentPassiveExpendableWithGov)
                ) &&
                (
                    PaymentPassiveExpendableWithSales == other.PaymentPassiveExpendableWithSales ||
                    PaymentPassiveExpendableWithSales != null &&
                    PaymentPassiveExpendableWithSales.Equals(other.PaymentPassiveExpendableWithSales)
                ) &&
                (
                    CommuneCommercialInfo == other.CommuneCommercialInfo ||
                    CommuneCommercialInfo != null &&
                    CommuneCommercialInfo.Equals(other.CommuneCommercialInfo)
                ) &&
                (
                    CorrectionMonetaryNeta == other.CorrectionMonetaryNeta ||
                    CorrectionMonetaryNeta != null &&
                    CorrectionMonetaryNeta.Equals(other.CorrectionMonetaryNeta)
                ) &&
                (
                    CorrectionMonetaryNetaGob == other.CorrectionMonetaryNetaGob ||
                    CorrectionMonetaryNetaGob != null &&
                    CorrectionMonetaryNetaGob.Equals(other.CorrectionMonetaryNetaGob)
                ) &&
                (
                    CorrectionMonetaryNetaPercentual == other.CorrectionMonetaryNetaPercentual ||
                    CorrectionMonetaryNetaPercentual != null &&
                    CorrectionMonetaryNetaPercentual.Equals(other.CorrectionMonetaryNetaPercentual)
                ) &&
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) &&
                (
                    DepreciationGob == other.DepreciationGob ||
                    DepreciationGob != null &&
                    DepreciationGob.Equals(other.DepreciationGob)
                ) &&
                (
                    Residency == other.Residency ||
                    Residency != null &&
                    Residency.Equals(other.Residency)
                ) &&
                (
                    Fax == other.Fax ||
                    Fax != null &&
                    Fax.Equals(other.Fax)
                ) &&
                (
                    ExpensesAdministrationSales == other.ExpensesAdministrationSales ||
                    ExpensesAdministrationSales != null &&
                    ExpensesAdministrationSales.Equals(other.ExpensesAdministrationSales)
                ) &&
                (
                    ExpensesAdministrationSalesPercentual == other.ExpensesAdministrationSalesPercentual ||
                    ExpensesAdministrationSalesPercentual != null &&
                    ExpensesAdministrationSalesPercentual.Equals(other.ExpensesAdministrationSalesPercentual)
                ) &&
                (
                    FinancialExpensesSales == other.FinancialExpensesSales ||
                    FinancialExpensesSales != null &&
                    FinancialExpensesSales.Equals(other.FinancialExpensesSales)
                ) &&
                (
                    Gob == other.Gob ||
                    Gob != null &&
                    Gob.Equals(other.Gob)
                ) &&
                (
                    GobSales == other.GobSales ||
                    GobSales != null &&
                    GobSales.Equals(other.GobSales)
                ) &&
                (
                    DegreeCommitmentActiveFix == other.DegreeCommitmentActiveFix ||
                    DegreeCommitmentActiveFix != null &&
                    DegreeCommitmentActiveFix.Equals(other.DegreeCommitmentActiveFix)
                ) &&
                (
                    DegreeCommitmentActiveTangible == other.DegreeCommitmentActiveTangible ||
                    DegreeCommitmentActiveTangible != null &&
                    DegreeCommitmentActiveTangible.Equals(other.DegreeCommitmentActiveTangible)
                ) &&
                (
                    IncomeTax == other.IncomeTax ||
                    IncomeTax != null &&
                    IncomeTax.Equals(other.IncomeTax)
                ) &&
                (
                    TaxPercent == other.TaxPercent ||
                    TaxPercent != null &&
                    TaxPercent.Equals(other.TaxPercent)
                ) &&
                (
                    InterestPaid == other.InterestPaid ||
                    InterestPaid != null &&
                    InterestPaid.Equals(other.InterestPaid)
                ) &&
                (
                    InterestsPatingsPercentual == other.InterestsPatingsPercentual ||
                    InterestsPatingsPercentual != null &&
                    InterestsPatingsPercentual.Equals(other.InterestsPatingsPercentual)
                ) &&
                (
                    AcidLiquidity == other.AcidLiquidity ||
                    AcidLiquidity != null &&
                    AcidLiquidity.Equals(other.AcidLiquidity)
                ) &&
                (
                    CurrentLiquidity == other.CurrentLiquidity ||
                    CurrentLiquidity != null &&
                    CurrentLiquidity.Equals(other.CurrentLiquidity)
                ) &&
                (
                    NameCorporateCommercialInfo == other.NameCorporateCommercialInfo ||
                    NameCorporateCommercialInfo != null &&
                    NameCorporateCommercialInfo.Equals(other.NameCorporateCommercialInfo)
                ) &&
                (
                    OtherIncomePercent == other.OtherIncomePercent ||
                    OtherIncomePercent != null &&
                    OtherIncomePercent.Equals(other.OtherIncomePercent)
                ) &&
                (
                    AverageCobro == other.AverageCobro ||
                    AverageCobro != null &&
                    AverageCobro.Equals(other.AverageCobro)
                ) &&
                (
                    AverageInventory == other.AverageInventory ||
                    AverageInventory != null &&
                    AverageInventory.Equals(other.AverageInventory)
                ) &&
                (
                    AveragePaymentProviders == other.AveragePaymentProviders ||
                    AveragePaymentProviders != null &&
                    AveragePaymentProviders.Equals(other.AveragePaymentProviders)
                ) &&
                (
                    Banks == other.Banks ||
                    Banks != null &&
                    Banks.Equals(other.Banks)
                ) &&
                (
                    PercentBanks == other.PercentBanks ||
                    PercentBanks != null &&
                    PercentBanks.Equals(other.PercentBanks)
                ) &&
                (
                    Box == other.Box ||
                    Box != null &&
                    Box.Equals(other.Box)
                ) &&
                (
                    PercentBox == other.PercentBox ||
                    PercentBox != null &&
                    PercentBox.Equals(other.PercentBox)
                ) &&
                (
                    CostOfExploitation == other.CostOfExploitation ||
                    CostOfExploitation != null &&
                    CostOfExploitation.Equals(other.CostOfExploitation)
                ) &&
                (
                    CostExploitationPercentual == other.CostExploitationPercentual ||
                    CostExploitationPercentual != null &&
                    CostExploitationPercentual.Equals(other.CostExploitationPercentual)
                ) &&
                (
                    AccountsReceivable == other.AccountsReceivable ||
                    AccountsReceivable != null &&
                    AccountsReceivable.Equals(other.AccountsReceivable)
                ) &&
                (
                    AccountsReceivableCompaniesRelated == other.AccountsReceivableCompaniesRelated ||
                    AccountsReceivableCompaniesRelated != null &&
                    AccountsReceivableCompaniesRelated.Equals(other.AccountsReceivableCompaniesRelated)
                ) &&
                (
                    AccountsReceivableRelatedPercentual == other.AccountsReceivableRelatedPercentual ||
                    AccountsReceivableRelatedPercentual != null &&
                    AccountsReceivableRelatedPercentual.Equals(other.AccountsReceivableRelatedPercentual)
                ) &&
                (
                    AccountsReceivablePercentual == other.AccountsReceivablePercentual ||
                    AccountsReceivablePercentual != null &&
                    AccountsReceivablePercentual.Equals(other.AccountsReceivablePercentual)
                ) &&
                (
                    DebtsByPay == other.DebtsByPay ||
                    DebtsByPay != null &&
                    DebtsByPay.Equals(other.DebtsByPay)
                ) &&
                (
                    AccountsByPayPershipsRelated == other.AccountsByPayPershipsRelated ||
                    AccountsByPayPershipsRelated != null &&
                    AccountsByPayPershipsRelated.Equals(other.AccountsByPayPershipsRelated)
                ) &&
                (
                    AccountsByPayCompaniesRelatedPercentual == other.AccountsByPayCompaniesRelatedPercentual ||
                    AccountsByPayCompaniesRelatedPercentual != null &&
                    AccountsByPayCompaniesRelatedPercentual.Equals(other.AccountsByPayCompaniesRelatedPercentual)
                ) &&
                (
                    AccountsByPayPercent == other.AccountsByPayPercent ||
                    AccountsByPayPercent != null &&
                    AccountsByPayPercent.Equals(other.AccountsByPayPercent)
                ) &&
                (
                    Depreciation == other.Depreciation ||
                    Depreciation != null &&
                    Depreciation.Equals(other.Depreciation)
                ) &&
                (
                    PercentageDepreciation == other.PercentageDepreciation ||
                    PercentageDepreciation != null &&
                    PercentageDepreciation.Equals(other.PercentageDepreciation)
                ) &&
                (
                    DifferenceBalance == other.DifferenceBalance ||
                    DifferenceBalance != null &&
                    DifferenceBalance.Equals(other.DifferenceBalance)
                ) &&
                (
                    DifferenceBalancePercentual == other.DifferenceBalancePercentual ||
                    DifferenceBalancePercentual != null &&
                    DifferenceBalancePercentual.Equals(other.DifferenceBalancePercentual)
                ) &&
                (
                    Folio == other.Folio ||
                    Folio != null &&
                    Folio.Equals(other.Folio)
                ) &&
                (
                    IndiceEndedationSummary == other.IndiceEndedationSummary ||
                    IndiceEndedationSummary != null &&
                    IndiceEndedationSummary.Equals(other.IndiceEndedationSummary)
                ) &&
                (
                    IndexLiquiditySummary == other.IndexLiquiditySummary ||
                    IndexLiquiditySummary != null &&
                    IndexLiquiditySummary.Equals(other.IndexLiquiditySummary)
                ) &&
                (
                    InterestsReceived == other.InterestsReceived ||
                    InterestsReceived != null &&
                    InterestsReceived.Equals(other.InterestsReceived)
                ) &&
                (
                    InterestsReceivedPercentual == other.InterestsReceivedPercentual ||
                    InterestsReceivedPercentual != null &&
                    InterestsReceivedPercentual.Equals(other.InterestsReceivedPercentual)
                ) &&
                (
                    Inventories == other.Inventories ||
                    Inventories != null &&
                    Inventories.Equals(other.Inventories)
                ) &&
                (
                    InventoriesPercent == other.InventoriesPercent ||
                    InventoriesPercent != null &&
                    InventoriesPercent.Equals(other.InventoriesPercent)
                ) &&
                (
                    MonthsPeriod == other.MonthsPeriod ||
                    MonthsPeriod != null &&
                    MonthsPeriod.Equals(other.MonthsPeriod)
                ) &&
                (
                    OtherAccountsPaymentNotExegible == other.OtherAccountsPaymentNotExegible ||
                    OtherAccountsPaymentNotExegible != null &&
                    OtherAccountsPaymentNotExegible.Equals(other.OtherAccountsPaymentNotExegible)
                ) &&
                (
                    OtherAccountsPativeNotExchangePercen == other.OtherAccountsPativeNotExchangePercen ||
                    OtherAccountsPativeNotExchangePercen != null &&
                    OtherAccountsPativeNotExchangePercen.Equals(other.OtherAccountsPativeNotExchangePercen)
                ) &&
                (
                    OtherAssets == other.OtherAssets ||
                    OtherAssets != null &&
                    OtherAssets.Equals(other.OtherAssets)
                ) &&
                (
                    OtherActivesPercentual == other.OtherActivesPercentual ||
                    OtherActivesPercentual != null &&
                    OtherActivesPercentual.Equals(other.OtherActivesPercentual)
                ) &&
                (
                    OtherCirculating == other.OtherCirculating ||
                    OtherCirculating != null &&
                    OtherCirculating.Equals(other.OtherCirculating)
                ) &&
                (
                    OtherCirculantsPercentual == other.OtherCirculantsPercentual ||
                    OtherCirculantsPercentual != null &&
                    OtherCirculantsPercentual.Equals(other.OtherCirculantsPercentual)
                ) &&
                (
                    OtherIncome == other.OtherIncome ||
                    OtherIncome != null &&
                    OtherIncome.Equals(other.OtherIncome)
                ) &&
                (
                    OtherPasivesCirculating == other.OtherPasivesCirculating ||
                    OtherPasivesCirculating != null &&
                    OtherPasivesCirculating.Equals(other.OtherPasivesCirculating)
                ) &&
                (
                    OtherPassivesCirculatingPercentual == other.OtherPassivesCirculatingPercentual ||
                    OtherPassivesCirculatingPercentual != null &&
                    OtherPassivesCirculatingPercentual.Equals(other.OtherPassivesCirculatingPercentual)
                ) &&
                (
                    PatrimonyNetoSummary == other.PatrimonyNetoSummary ||
                    PatrimonyNetoSummary != null &&
                    PatrimonyNetoSummary.Equals(other.PatrimonyNetoSummary)
                ) &&
                (
                    PercentagePatrimony == other.PercentagePatrimony ||
                    PercentagePatrimony != null &&
                    PercentagePatrimony.Equals(other.PercentagePatrimony)
                ) &&
                (
                    Patrimony == other.Patrimony ||
                    Patrimony != null &&
                    Patrimony.Equals(other.Patrimony)
                ) &&
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) &&
                (
                    PpmProvisionsOther == other.PpmProvisionsOther ||
                    PpmProvisionsOther != null &&
                    PpmProvisionsOther.Equals(other.PpmProvisionsOther)
                ) &&
                (
                    PpmProvisionsOtherPercentual == other.PpmProvisionsOtherPercentual ||
                    PpmProvisionsOtherPercentual != null &&
                    PpmProvisionsOtherPercentual.Equals(other.PpmProvisionsOtherPercentual)
                ) &&
                (
                    AverageCobranzaSummary == other.AverageCobranzaSummary ||
                    AverageCobranzaSummary != null &&
                    AverageCobranzaSummary.Equals(other.AverageCobranzaSummary)
                ) &&
                (
                    AverageInventorySummary == other.AverageInventorySummary ||
                    AverageInventorySummary != null &&
                    AverageInventorySummary.Equals(other.AverageInventorySummary)
                ) &&
                (
                    OperationalResult == other.OperationalResult ||
                    OperationalResult != null &&
                    OperationalResult.Equals(other.OperationalResult)
                ) &&
                (
                    PerformanceOperationalPercentual == other.PerformanceOperationalPercentual ||
                    PerformanceOperationalPercentual != null &&
                    PerformanceOperationalPercentual.Equals(other.PerformanceOperationalPercentual)
                ) &&
                (
                    Retreats == other.Retreats ||
                    Retreats != null &&
                    Retreats.Equals(other.Retreats)
                ) &&
                (
                    LeavePercent == other.LeavePercent ||
                    LeavePercent != null &&
                    LeavePercent.Equals(other.LeavePercent)
                ) &&
                (
                    TotalActiveCirculating == other.TotalActiveCirculating ||
                    TotalActiveCirculating != null &&
                    TotalActiveCirculating.Equals(other.TotalActiveCirculating)
                ) &&
                (
                    TotalActiveCirculatingPercentual == other.TotalActiveCirculatingPercentual ||
                    TotalActiveCirculatingPercentual != null &&
                    TotalActiveCirculatingPercentual.Equals(other.TotalActiveCirculatingPercentual)
                ) &&
                (
                    TotalActiveFixedNeto == other.TotalActiveFixedNeto ||
                    TotalActiveFixedNeto != null &&
                    TotalActiveFixedNeto.Equals(other.TotalActiveFixedNeto)
                ) &&
                (
                    TotalActiveFixedNetoPercentual == other.TotalActiveFixedNetoPercentual ||
                    TotalActiveFixedNetoPercentual != null &&
                    TotalActiveFixedNetoPercentual.Equals(other.TotalActiveFixedNetoPercentual)
                ) &&
                (
                    TotalActivoFixedNetoSummary == other.TotalActivoFixedNetoSummary ||
                    TotalActivoFixedNetoSummary != null &&
                    TotalActivoFixedNetoSummary.Equals(other.TotalActivoFixedNetoSummary)
                ) &&
                (
                    TotalActive == other.TotalActive ||
                    TotalActive != null &&
                    TotalActive.Equals(other.TotalActive)
                ) &&
                (
                    TotalActivesPercentual == other.TotalActivesPercentual ||
                    TotalActivesPercentual != null &&
                    TotalActivesPercentual.Equals(other.TotalActivesPercentual)
                ) &&
                (
                    TotalActivesSummary == other.TotalActivesSummary ||
                    TotalActivesSummary != null &&
                    TotalActivesSummary.Equals(other.TotalActivesSummary)
                ) &&
                (
                    TotalOtherActives == other.TotalOtherActives ||
                    TotalOtherActives != null &&
                    TotalOtherActives.Equals(other.TotalOtherActives)
                ) &&
                (
                    TotalOtherActivesPercentual == other.TotalOtherActivesPercentual ||
                    TotalOtherActivesPercentual != null &&
                    TotalOtherActivesPercentual.Equals(other.TotalOtherActivesPercentual)
                ) &&
                (
                    TotalPassive == other.TotalPassive ||
                    TotalPassive != null &&
                    TotalPassive.Equals(other.TotalPassive)
                ) &&
                (
                    TotalPassiveExpendable == other.TotalPassiveExpendable ||
                    TotalPassiveExpendable != null &&
                    TotalPassiveExpendable.Equals(other.TotalPassiveExpendable)
                ) &&
                (
                    TotalPassiveExpendablePercentual == other.TotalPassiveExpendablePercentual ||
                    TotalPassiveExpendablePercentual != null &&
                    TotalPassiveExpendablePercentual.Equals(other.TotalPassiveExpendablePercentual)
                ) &&
                (
                    TotalPassiveExpendableSummary == other.TotalPassiveExpendableSummary ||
                    TotalPassiveExpendableSummary != null &&
                    TotalPassiveExpendableSummary.Equals(other.TotalPassiveExpendableSummary)
                ) &&
                (
                    TotalPassivePercentual == other.TotalPassivePercentual ||
                    TotalPassivePercentual != null &&
                    TotalPassivePercentual.Equals(other.TotalPassivePercentual)
                ) &&
                (
                    TotalPassiveCirculating == other.TotalPassiveCirculating ||
                    TotalPassiveCirculating != null &&
                    TotalPassiveCirculating.Equals(other.TotalPassiveCirculating)
                ) &&
                (
                    TotalPassiveCirculatingPercentual == other.TotalPassiveCirculatingPercentual ||
                    TotalPassiveCirculatingPercentual != null &&
                    TotalPassiveCirculatingPercentual.Equals(other.TotalPassiveCirculatingPercentual)
                ) &&
                (
                    UtilityExercise == other.UtilityExercise ||
                    UtilityExercise != null &&
                    UtilityExercise.Equals(other.UtilityExercise)
                ) &&
                (
                    UtilityExercisePercentual == other.UtilityExercisePercentual ||
                    UtilityExercisePercentual != null &&
                    UtilityExercisePercentual.Equals(other.UtilityExercisePercentual)
                ) &&
                (
                    UtilityNetaSummary == other.UtilityNetaSummary ||
                    UtilityNetaSummary != null &&
                    UtilityNetaSummary.Equals(other.UtilityNetaSummary)
                ) &&
                (
                    UtilityNetaSalesSummary == other.UtilityNetaSalesSummary ||
                    UtilityNetaSalesSummary != null &&
                    UtilityNetaSalesSummary.Equals(other.UtilityNetaSalesSummary)
                ) &&
                (
                    Sales == other.Sales ||
                    Sales != null &&
                    Sales.Equals(other.Sales)
                ) &&
                (
                    UtilityNetasSummary == other.UtilityNetasSummary ||
                    UtilityNetasSummary != null &&
                    UtilityNetasSummary.Equals(other.UtilityNetasSummary)
                ) &&
                (
                    SalesPercentual == other.SalesPercentual ||
                    SalesPercentual != null &&
                    SalesPercentual.Equals(other.SalesPercentual)
                ) &&
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                ) &&
                (
                    RegionCommercialInfo == other.RegionCommercialInfo ||
                    RegionCommercialInfo != null &&
                    RegionCommercialInfo.Equals(other.RegionCommercialInfo)
                ) &&
                (
                    ResultBeforeTax == other.ResultBeforeTax ||
                    ResultBeforeTax != null &&
                    ResultBeforeTax.Equals(other.ResultBeforeTax)
                ) &&
                (
                    ResultBeforeTaxPercentual == other.ResultBeforeTaxPercentual ||
                    ResultBeforeTaxPercentual != null &&
                    ResultBeforeTaxPercentual.Equals(other.ResultBeforeTaxPercentual)
                ) &&
                (
                    ResultExploitation == other.ResultExploitation ||
                    ResultExploitation != null &&
                    ResultExploitation.Equals(other.ResultExploitation)
                ) &&
                (
                    ResultExploitationPercentual == other.ResultExploitationPercentual ||
                    ResultExploitationPercentual != null &&
                    ResultExploitationPercentual.Equals(other.ResultExploitationPercentual)
                ) &&
                (
                    ExitUtility == other.ExitUtility ||
                    ExitUtility != null &&
                    ExitUtility.Equals(other.ExitUtility)
                ) &&
                (
                    RotationCapitalWork == other.RotationCapitalWork ||
                    RotationCapitalWork != null &&
                    RotationCapitalWork.Equals(other.RotationCapitalWork)
                ) &&
                (
                    RotacionAccountsReceivable == other.RotacionAccountsReceivable ||
                    RotacionAccountsReceivable != null &&
                    RotacionAccountsReceivable.Equals(other.RotacionAccountsReceivable)
                ) &&
                (
                    RotacionAccountsPayments == other.RotacionAccountsPayments ||
                    RotacionAccountsPayments != null &&
                    RotacionAccountsPayments.Equals(other.RotacionAccountsPayments)
                ) &&
                (
                    RotationInventory == other.RotationInventory ||
                    RotationInventory != null &&
                    RotationInventory.Equals(other.RotationInventory)
                ) &&
                (
                    ClientIdCommercialInfo == other.ClientIdCommercialInfo ||
                    ClientIdCommercialInfo != null &&
                    ClientIdCommercialInfo.Equals(other.ClientIdCommercialInfo)
                ) &&
                (
                    ClientIdRepresentanteLegal == other.ClientIdRepresentanteLegal ||
                    ClientIdRepresentanteLegal != null &&
                    ClientIdRepresentanteLegal.Equals(other.ClientIdRepresentanteLegal)
                ) &&
                (
                    Solvency == other.Solvency ||
                    Solvency != null &&
                    Solvency.Equals(other.Solvency)
                ) &&
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) &&
                (
                    Telephone == other.Telephone ||
                    Telephone != null &&
                    Telephone.Equals(other.Telephone)
                ) &&
                (
                    TypeBankAccount == other.TypeBankAccount ||
                    TypeBankAccount != null &&
                    TypeBankAccount.Equals(other.TypeBankAccount)
                ) &&
                (
                    TotalPassiveExpendablePatrimony == other.TotalPassiveExpendablePatrimony ||
                    TotalPassiveExpendablePatrimony != null &&
                    TotalPassiveExpendablePatrimony.Equals(other.TotalPassiveExpendablePatrimony)
                ) &&
                (
                    TotalPassiveExpendableTotalActive == other.TotalPassiveExpendableTotalActive ||
                    TotalPassiveExpendableTotalActive != null &&
                    TotalPassiveExpendableTotalActive.Equals(other.TotalPassiveExpendableTotalActive)
                ) &&
                (
                    UtilityNet == other.UtilityNet ||
                    UtilityNet != null &&
                    UtilityNet.Equals(other.UtilityNet)
                ) &&
                (
                    UtilityNetPercentual == other.UtilityNetPercentual ||
                    UtilityNetPercentual != null &&
                    UtilityNetPercentual.Equals(other.UtilityNetPercentual)
                ) &&
                (
                    UtilityNetTotalActive == other.UtilityNetTotalActive ||
                    UtilityNetTotalActive != null &&
                    UtilityNetTotalActive.Equals(other.UtilityNetTotalActive)
                ) &&
                (
                    UtilityPatrimony == other.UtilityPatrimony ||
                    UtilityPatrimony != null &&
                    UtilityPatrimony.Equals(other.UtilityPatrimony)
                ) &&
                (
                    LostUtilityNetaGob == other.LostUtilityNetaGob ||
                    LostUtilityNetaGob != null &&
                    LostUtilityNetaGob.Equals(other.LostUtilityNetaGob)
                ) &&
                (
                    SalesUtility == other.SalesUtility ||
                    SalesUtility != null &&
                    SalesUtility.Equals(other.SalesUtility)
                ) &&
                (
                    VariationOfSales == other.VariationOfSales ||
                    VariationOfSales != null &&
                    VariationOfSales.Equals(other.VariationOfSales)
                ) &&
                (
                    SalesActiveFijoNeto == other.SalesActiveFijoNeto ||
                    SalesActiveFijoNeto != null &&
                    SalesActiveFijoNeto.Equals(other.SalesActiveFijoNeto)
                ) &&
                (
                    SalesTotalIngress == other.SalesTotalIngress ||
                    SalesTotalIngress != null &&
                    SalesTotalIngress.Equals(other.SalesTotalIngress)
                ) &&
                (
                    ViabilityFinancia == other.ViabilityFinancia ||
                    ViabilityFinancia != null &&
                    ViabilityFinancia.Equals(other.ViabilityFinancia)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (EconomicActivity != null)
                    hashCode = hashCode * 59 + EconomicActivity.GetHashCode();
                if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                if (Bank != null)
                    hashCode = hashCode * 59 + Bank.GetHashCode();
                if (GrowthCapacity != null)
                    hashCode = hashCode * 59 + GrowthCapacity.GetHashCode();
                if (StockKnowLedgeable != null)
                    hashCode = hashCode * 59 + StockKnowLedgeable.GetHashCode();
                if (CapitalEnteratedPercentual != null)
                    hashCode = hashCode * 59 + CapitalEnteratedPercentual.GetHashCode();
                if (OperationalCycle != null)
                    hashCode = hashCode * 59 + OperationalCycle.GetHashCode();
                if (CoverageFinancialXpenditures != null)
                    hashCode = hashCode * 59 + CoverageFinancialXpenditures.GetHashCode();
                if (PaymentPassiveExpendableWithGov != null)
                    hashCode = hashCode * 59 + PaymentPassiveExpendableWithGov.GetHashCode();
                if (PaymentPassiveExpendableWithSales != null)
                    hashCode = hashCode * 59 + PaymentPassiveExpendableWithSales.GetHashCode();
                if (CommuneCommercialInfo != null)
                    hashCode = hashCode * 59 + CommuneCommercialInfo.GetHashCode();
                if (CorrectionMonetaryNeta != null)
                    hashCode = hashCode * 59 + CorrectionMonetaryNeta.GetHashCode();
                if (CorrectionMonetaryNetaGob != null)
                    hashCode = hashCode * 59 + CorrectionMonetaryNetaGob.GetHashCode();
                if (CorrectionMonetaryNetaPercentual != null)
                    hashCode = hashCode * 59 + CorrectionMonetaryNetaPercentual.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (DepreciationGob != null)
                    hashCode = hashCode * 59 + DepreciationGob.GetHashCode();
                if (Residency != null)
                    hashCode = hashCode * 59 + Residency.GetHashCode();
                if (Fax != null)
                    hashCode = hashCode * 59 + Fax.GetHashCode();
                if (ExpensesAdministrationSales != null)
                    hashCode = hashCode * 59 + ExpensesAdministrationSales.GetHashCode();
                if (ExpensesAdministrationSalesPercentual != null)
                    hashCode = hashCode * 59 + ExpensesAdministrationSalesPercentual.GetHashCode();
                if (FinancialExpensesSales != null)
                    hashCode = hashCode * 59 + FinancialExpensesSales.GetHashCode();
                if (Gob != null)
                    hashCode = hashCode * 59 + Gob.GetHashCode();
                if (GobSales != null)
                    hashCode = hashCode * 59 + GobSales.GetHashCode();
                if (DegreeCommitmentActiveFix != null)
                    hashCode = hashCode * 59 + DegreeCommitmentActiveFix.GetHashCode();
                if (DegreeCommitmentActiveTangible != null)
                    hashCode = hashCode * 59 + DegreeCommitmentActiveTangible.GetHashCode();
                if (IncomeTax != null)
                    hashCode = hashCode * 59 + IncomeTax.GetHashCode();
                if (TaxPercent != null)
                    hashCode = hashCode * 59 + TaxPercent.GetHashCode();
                if (InterestPaid != null)
                    hashCode = hashCode * 59 + InterestPaid.GetHashCode();
                if (InterestsPatingsPercentual != null)
                    hashCode = hashCode * 59 + InterestsPatingsPercentual.GetHashCode();
                if (AcidLiquidity != null)
                    hashCode = hashCode * 59 + AcidLiquidity.GetHashCode();
                if (CurrentLiquidity != null)
                    hashCode = hashCode * 59 + CurrentLiquidity.GetHashCode();
                if (NameCorporateCommercialInfo != null)
                    hashCode = hashCode * 59 + NameCorporateCommercialInfo.GetHashCode();
                if (OtherIncomePercent != null)
                    hashCode = hashCode * 59 + OtherIncomePercent.GetHashCode();
                if (AverageCobro != null)
                    hashCode = hashCode * 59 + AverageCobro.GetHashCode();
                if (AverageInventory != null)
                    hashCode = hashCode * 59 + AverageInventory.GetHashCode();
                if (AveragePaymentProviders != null)
                    hashCode = hashCode * 59 + AveragePaymentProviders.GetHashCode();
                if (Banks != null)
                    hashCode = hashCode * 59 + Banks.GetHashCode();
                if (PercentBanks != null)
                    hashCode = hashCode * 59 + PercentBanks.GetHashCode();
                if (Box != null)
                    hashCode = hashCode * 59 + Box.GetHashCode();
                if (PercentBox != null)
                    hashCode = hashCode * 59 + PercentBox.GetHashCode();
                if (CostOfExploitation != null)
                    hashCode = hashCode * 59 + CostOfExploitation.GetHashCode();
                if (CostExploitationPercentual != null)
                    hashCode = hashCode * 59 + CostExploitationPercentual.GetHashCode();
                if (AccountsReceivable != null)
                    hashCode = hashCode * 59 + AccountsReceivable.GetHashCode();
                if (AccountsReceivableCompaniesRelated != null)
                    hashCode = hashCode * 59 + AccountsReceivableCompaniesRelated.GetHashCode();
                if (AccountsReceivableRelatedPercentual != null)
                    hashCode = hashCode * 59 + AccountsReceivableRelatedPercentual.GetHashCode();
                if (AccountsReceivablePercentual != null)
                    hashCode = hashCode * 59 + AccountsReceivablePercentual.GetHashCode();
                if (DebtsByPay != null)
                    hashCode = hashCode * 59 + DebtsByPay.GetHashCode();
                if (AccountsByPayPershipsRelated != null)
                    hashCode = hashCode * 59 + AccountsByPayPershipsRelated.GetHashCode();
                if (AccountsByPayCompaniesRelatedPercentual != null)
                    hashCode = hashCode * 59 + AccountsByPayCompaniesRelatedPercentual.GetHashCode();
                if (AccountsByPayPercent != null)
                    hashCode = hashCode * 59 + AccountsByPayPercent.GetHashCode();
                if (Depreciation != null)
                    hashCode = hashCode * 59 + Depreciation.GetHashCode();
                if (PercentageDepreciation != null)
                    hashCode = hashCode * 59 + PercentageDepreciation.GetHashCode();
                if (DifferenceBalance != null)
                    hashCode = hashCode * 59 + DifferenceBalance.GetHashCode();
                if (DifferenceBalancePercentual != null)
                    hashCode = hashCode * 59 + DifferenceBalancePercentual.GetHashCode();
                if (Folio != null)
                    hashCode = hashCode * 59 + Folio.GetHashCode();
                if (IndiceEndedationSummary != null)
                    hashCode = hashCode * 59 + IndiceEndedationSummary.GetHashCode();
                if (IndexLiquiditySummary != null)
                    hashCode = hashCode * 59 + IndexLiquiditySummary.GetHashCode();
                if (InterestsReceived != null)
                    hashCode = hashCode * 59 + InterestsReceived.GetHashCode();
                if (InterestsReceivedPercentual != null)
                    hashCode = hashCode * 59 + InterestsReceivedPercentual.GetHashCode();
                if (Inventories != null)
                    hashCode = hashCode * 59 + Inventories.GetHashCode();
                if (InventoriesPercent != null)
                    hashCode = hashCode * 59 + InventoriesPercent.GetHashCode();
                if (MonthsPeriod != null)
                    hashCode = hashCode * 59 + MonthsPeriod.GetHashCode();
                if (OtherAccountsPaymentNotExegible != null)
                    hashCode = hashCode * 59 + OtherAccountsPaymentNotExegible.GetHashCode();
                if (OtherAccountsPativeNotExchangePercen != null)
                    hashCode = hashCode * 59 + OtherAccountsPativeNotExchangePercen.GetHashCode();
                if (OtherAssets != null)
                    hashCode = hashCode * 59 + OtherAssets.GetHashCode();
                if (OtherActivesPercentual != null)
                    hashCode = hashCode * 59 + OtherActivesPercentual.GetHashCode();
                if (OtherCirculating != null)
                    hashCode = hashCode * 59 + OtherCirculating.GetHashCode();
                if (OtherCirculantsPercentual != null)
                    hashCode = hashCode * 59 + OtherCirculantsPercentual.GetHashCode();
                if (OtherIncome != null)
                    hashCode = hashCode * 59 + OtherIncome.GetHashCode();
                if (OtherPasivesCirculating != null)
                    hashCode = hashCode * 59 + OtherPasivesCirculating.GetHashCode();
                if (OtherPassivesCirculatingPercentual != null)
                    hashCode = hashCode * 59 + OtherPassivesCirculatingPercentual.GetHashCode();
                if (PatrimonyNetoSummary != null)
                    hashCode = hashCode * 59 + PatrimonyNetoSummary.GetHashCode();
                if (PercentagePatrimony != null)
                    hashCode = hashCode * 59 + PercentagePatrimony.GetHashCode();
                if (Patrimony != null)
                    hashCode = hashCode * 59 + Patrimony.GetHashCode();
                if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                if (PpmProvisionsOther != null)
                    hashCode = hashCode * 59 + PpmProvisionsOther.GetHashCode();
                if (PpmProvisionsOtherPercentual != null)
                    hashCode = hashCode * 59 + PpmProvisionsOtherPercentual.GetHashCode();
                if (AverageCobranzaSummary != null)
                    hashCode = hashCode * 59 + AverageCobranzaSummary.GetHashCode();
                if (AverageInventorySummary != null)
                    hashCode = hashCode * 59 + AverageInventorySummary.GetHashCode();
                if (OperationalResult != null)
                    hashCode = hashCode * 59 + OperationalResult.GetHashCode();
                if (PerformanceOperationalPercentual != null)
                    hashCode = hashCode * 59 + PerformanceOperationalPercentual.GetHashCode();
                if (Retreats != null)
                    hashCode = hashCode * 59 + Retreats.GetHashCode();
                if (LeavePercent != null)
                    hashCode = hashCode * 59 + LeavePercent.GetHashCode();
                if (TotalActiveCirculating != null)
                    hashCode = hashCode * 59 + TotalActiveCirculating.GetHashCode();
                if (TotalActiveCirculatingPercentual != null)
                    hashCode = hashCode * 59 + TotalActiveCirculatingPercentual.GetHashCode();
                if (TotalActiveFixedNeto != null)
                    hashCode = hashCode * 59 + TotalActiveFixedNeto.GetHashCode();
                if (TotalActiveFixedNetoPercentual != null)
                    hashCode = hashCode * 59 + TotalActiveFixedNetoPercentual.GetHashCode();
                if (TotalActivoFixedNetoSummary != null)
                    hashCode = hashCode * 59 + TotalActivoFixedNetoSummary.GetHashCode();
                if (TotalActive != null)
                    hashCode = hashCode * 59 + TotalActive.GetHashCode();
                if (TotalActivesPercentual != null)
                    hashCode = hashCode * 59 + TotalActivesPercentual.GetHashCode();
                if (TotalActivesSummary != null)
                    hashCode = hashCode * 59 + TotalActivesSummary.GetHashCode();
                if (TotalOtherActives != null)
                    hashCode = hashCode * 59 + TotalOtherActives.GetHashCode();
                if (TotalOtherActivesPercentual != null)
                    hashCode = hashCode * 59 + TotalOtherActivesPercentual.GetHashCode();
                if (TotalPassive != null)
                    hashCode = hashCode * 59 + TotalPassive.GetHashCode();
                if (TotalPassiveExpendable != null)
                    hashCode = hashCode * 59 + TotalPassiveExpendable.GetHashCode();
                if (TotalPassiveExpendablePercentual != null)
                    hashCode = hashCode * 59 + TotalPassiveExpendablePercentual.GetHashCode();
                if (TotalPassiveExpendableSummary != null)
                    hashCode = hashCode * 59 + TotalPassiveExpendableSummary.GetHashCode();
                if (TotalPassivePercentual != null)
                    hashCode = hashCode * 59 + TotalPassivePercentual.GetHashCode();
                if (TotalPassiveCirculating != null)
                    hashCode = hashCode * 59 + TotalPassiveCirculating.GetHashCode();
                if (TotalPassiveCirculatingPercentual != null)
                    hashCode = hashCode * 59 + TotalPassiveCirculatingPercentual.GetHashCode();
                if (UtilityExercise != null)
                    hashCode = hashCode * 59 + UtilityExercise.GetHashCode();
                if (UtilityExercisePercentual != null)
                    hashCode = hashCode * 59 + UtilityExercisePercentual.GetHashCode();
                if (UtilityNetaSummary != null)
                    hashCode = hashCode * 59 + UtilityNetaSummary.GetHashCode();
                if (UtilityNetaSalesSummary != null)
                    hashCode = hashCode * 59 + UtilityNetaSalesSummary.GetHashCode();
                if (Sales != null)
                    hashCode = hashCode * 59 + Sales.GetHashCode();
                if (UtilityNetasSummary != null)
                    hashCode = hashCode * 59 + UtilityNetasSummary.GetHashCode();
                if (SalesPercentual != null)
                    hashCode = hashCode * 59 + SalesPercentual.GetHashCode();
                if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                if (RegionCommercialInfo != null)
                    hashCode = hashCode * 59 + RegionCommercialInfo.GetHashCode();
                if (ResultBeforeTax != null)
                    hashCode = hashCode * 59 + ResultBeforeTax.GetHashCode();
                if (ResultBeforeTaxPercentual != null)
                    hashCode = hashCode * 59 + ResultBeforeTaxPercentual.GetHashCode();
                if (ResultExploitation != null)
                    hashCode = hashCode * 59 + ResultExploitation.GetHashCode();
                if (ResultExploitationPercentual != null)
                    hashCode = hashCode * 59 + ResultExploitationPercentual.GetHashCode();
                if (ExitUtility != null)
                    hashCode = hashCode * 59 + ExitUtility.GetHashCode();
                if (RotationCapitalWork != null)
                    hashCode = hashCode * 59 + RotationCapitalWork.GetHashCode();
                if (RotacionAccountsReceivable != null)
                    hashCode = hashCode * 59 + RotacionAccountsReceivable.GetHashCode();
                if (RotacionAccountsPayments != null)
                    hashCode = hashCode * 59 + RotacionAccountsPayments.GetHashCode();
                if (RotationInventory != null)
                    hashCode = hashCode * 59 + RotationInventory.GetHashCode();
                if (ClientIdCommercialInfo != null)
                    hashCode = hashCode * 59 + ClientIdCommercialInfo.GetHashCode();
                if (ClientIdRepresentanteLegal != null)
                    hashCode = hashCode * 59 + ClientIdRepresentanteLegal.GetHashCode();
                if (Solvency != null)
                    hashCode = hashCode * 59 + Solvency.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (Telephone != null)
                    hashCode = hashCode * 59 + Telephone.GetHashCode();
                if (TypeBankAccount != null)
                    hashCode = hashCode * 59 + TypeBankAccount.GetHashCode();
                if (TotalPassiveExpendablePatrimony != null)
                    hashCode = hashCode * 59 + TotalPassiveExpendablePatrimony.GetHashCode();
                if (TotalPassiveExpendableTotalActive != null)
                    hashCode = hashCode * 59 + TotalPassiveExpendableTotalActive.GetHashCode();
                if (UtilityNet != null)
                    hashCode = hashCode * 59 + UtilityNet.GetHashCode();
                if (UtilityNetPercentual != null)
                    hashCode = hashCode * 59 + UtilityNetPercentual.GetHashCode();
                if (UtilityNetTotalActive != null)
                    hashCode = hashCode * 59 + UtilityNetTotalActive.GetHashCode();
                if (UtilityPatrimony != null)
                    hashCode = hashCode * 59 + UtilityPatrimony.GetHashCode();
                if (LostUtilityNetaGob != null)
                    hashCode = hashCode * 59 + LostUtilityNetaGob.GetHashCode();
                if (SalesUtility != null)
                    hashCode = hashCode * 59 + SalesUtility.GetHashCode();
                if (VariationOfSales != null)
                    hashCode = hashCode * 59 + VariationOfSales.GetHashCode();
                if (SalesActiveFijoNeto != null)
                    hashCode = hashCode * 59 + SalesActiveFijoNeto.GetHashCode();
                if (SalesTotalIngress != null)
                    hashCode = hashCode * 59 + SalesTotalIngress.GetHashCode();
                if (ViabilityFinancia != null)
                    hashCode = hashCode * 59 + ViabilityFinancia.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PeriodBalanceDetail left, PeriodBalanceDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PeriodBalanceDetail left, PeriodBalanceDetail right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
