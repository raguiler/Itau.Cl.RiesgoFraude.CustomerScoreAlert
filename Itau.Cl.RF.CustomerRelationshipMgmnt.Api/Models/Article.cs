/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;


namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Article : IEquatable<Article>
    {
        /// <summary>
        /// Gets or Sets TypeCommercialInfo
        /// </summary>

        [DataMember(Name = "typeCommercialInfo")]
        public string TypeCommercialInfo { get; set; }

        /// <summary>
        /// Gets or Sets CommentArticles
        /// </summary>

        [DataMember(Name = "commentArticles")]
        public string CommentArticles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Article {\n");
            sb.Append("  TypeCommercialInfo: ").Append(TypeCommercialInfo).Append("\n");
            sb.Append("  CommentArticles: ").Append(CommentArticles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Article)obj);
        }

        /// <summary>
        /// Returns true if Article instances are equal
        /// </summary>
        /// <param name="other">Instance of Article to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Article other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    TypeCommercialInfo == other.TypeCommercialInfo ||
                    TypeCommercialInfo != null &&
                    TypeCommercialInfo.Equals(other.TypeCommercialInfo)
                ) &&
                (
                    CommentArticles == other.CommentArticles ||
                    CommentArticles != null &&
                    CommentArticles.Equals(other.CommentArticles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (TypeCommercialInfo != null)
                    hashCode = hashCode * 59 + TypeCommercialInfo.GetHashCode();
                if (CommentArticles != null)
                    hashCode = hashCode * 59 + CommentArticles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Article left, Article right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Article left, Article right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
