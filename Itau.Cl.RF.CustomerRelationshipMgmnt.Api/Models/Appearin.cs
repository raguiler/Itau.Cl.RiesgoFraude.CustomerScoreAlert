/*
 * Datamart Customer Relationship Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace Itau.Cl.RF.CustomerRelationshipMgmnt.Bff.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Appearin : IEquatable<Appearin>
    {
        /// <summary>
        /// Gets or Sets NameAppearing
        /// </summary>

        [DataMember(Name = "nameAppearing")]
        public string NameAppearing { get; set; }

        /// <summary>
        /// Gets or Sets ClientIdAppearing
        /// </summary>

        [DataMember(Name = "clientIdAppearing")]
        public long? ClientIdAppearing { get; set; }

        /// <summary>
        /// Gets or Sets ResidencyAppearing
        /// </summary>

        [DataMember(Name = "residencyAppearing")]
        public string ResidencyAppearing { get; set; }

        /// <summary>
        /// Gets or Sets CommunePerformancesContent
        /// </summary>

        [DataMember(Name = "communePerformancesContent")]
        public string CommunePerformancesContent { get; set; }

        /// <summary>
        /// Gets or Sets RegionAppearing
        /// </summary>

        [DataMember(Name = "regionAppearing")]
        public string RegionAppearing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Appearin {\n");
            sb.Append("  NameAppearing: ").Append(NameAppearing).Append("\n");
            sb.Append("  ClientIdAppearing: ").Append(ClientIdAppearing).Append("\n");
            sb.Append("  ResidencyAppearing: ").Append(ResidencyAppearing).Append("\n");
            sb.Append("  CommunePerformancesContent: ").Append(CommunePerformancesContent).Append("\n");
            sb.Append("  RegionAppearing: ").Append(RegionAppearing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Appearin)obj);
        }

        /// <summary>
        /// Returns true if Appearin instances are equal
        /// </summary>
        /// <param name="other">Instance of Appearin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Appearin other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    NameAppearing == other.NameAppearing ||
                    NameAppearing != null &&
                    NameAppearing.Equals(other.NameAppearing)
                ) &&
                (
                    ClientIdAppearing == other.ClientIdAppearing ||
                    ClientIdAppearing != null &&
                    ClientIdAppearing.Equals(other.ClientIdAppearing)
                ) &&
                (
                    ResidencyAppearing == other.ResidencyAppearing ||
                    ResidencyAppearing != null &&
                    ResidencyAppearing.Equals(other.ResidencyAppearing)
                ) &&
                (
                    CommunePerformancesContent == other.CommunePerformancesContent ||
                    CommunePerformancesContent != null &&
                    CommunePerformancesContent.Equals(other.CommunePerformancesContent)
                ) &&
                (
                    RegionAppearing == other.RegionAppearing ||
                    RegionAppearing != null &&
                    RegionAppearing.Equals(other.RegionAppearing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NameAppearing != null)
                    hashCode = hashCode * 59 + NameAppearing.GetHashCode();
                if (ClientIdAppearing != null)
                    hashCode = hashCode * 59 + ClientIdAppearing.GetHashCode();
                if (ResidencyAppearing != null)
                    hashCode = hashCode * 59 + ResidencyAppearing.GetHashCode();
                if (CommunePerformancesContent != null)
                    hashCode = hashCode * 59 + CommunePerformancesContent.GetHashCode();
                if (RegionAppearing != null)
                    hashCode = hashCode * 59 + RegionAppearing.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Appearin left, Appearin right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Appearin left, Appearin right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
